{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "..\\..\\..\\UCB-USACE-LSTMs\n",
      "['..\\\\..\\\\..\\\\UCB-USACE-LSTMs', '..\\\\..\\\\..\\\\UCB-USACE-LSTMs\\\\data', 'F:\\\\Dino\\\\UCB-USACE-LSTMs\\\\neuralhydrology\\\\UCB_training', 'C:\\\\Users\\\\Dino\\\\anaconda3\\\\python312.zip', 'C:\\\\Users\\\\Dino\\\\anaconda3\\\\DLLs', 'C:\\\\Users\\\\Dino\\\\anaconda3\\\\Lib', 'C:\\\\Users\\\\Dino\\\\anaconda3', '', 'C:\\\\Users\\\\Dino\\\\anaconda3\\\\Lib\\\\site-packages', 'C:\\\\Users\\\\Dino\\\\anaconda3\\\\Lib\\\\site-packages\\\\win32', 'C:\\\\Users\\\\Dino\\\\anaconda3\\\\Lib\\\\site-packages\\\\win32\\\\lib', 'C:\\\\Users\\\\Dino\\\\anaconda3\\\\Lib\\\\site-packages\\\\Pythonwin']\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "import os\n",
    "os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'\n",
    "library_path = os.path.join('..', '..', '..', 'UCB-USACE-LSTMs')\n",
    "data_path = os.path.join('..', '..', '..', 'UCB-USACE-LSTMs', 'data')\n",
    "print(library_path)\n",
    "sys.path.insert(0, data_path)\n",
    "sys.path.insert(0, library_path)\n",
    "print(sys.path)\n",
    "from UCB_train import UCB_trainer\n",
    "from pathlib import Path\n",
    "import matplotlib.pyplot as plt\n",
    "from neuralhydrology.evaluation.metrics import calculate_all_metrics\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "path_to_csv = Path('F:/Dino/UCB-USACE-LSTMs/data/')\n",
    "params = {'learning_rate': 0.001, 'batch_size': 256, 'epochs': 32, 'seq_length' : 90, 'output_dropout' : 0.4, 'validate_every': 1, 'save_weights_every': 1}\n",
    "num_ensemble_members = 1\n",
    "trainer = UCB_trainer(path_to_csv, params, num_ensemble_members, physics_informed=False, gpu = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2024-10-30 12:24:26,266: Logging to F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_122426\\output.log initialized.\n",
      "2024-10-30 12:24:26,269: ### Folder structure created at F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_122426\n",
      "2024-10-30 12:24:26,271: ### Run configurations for testing_run\n",
      "2024-10-30 12:24:26,273: experiment_name: testing_run\n",
      "2024-10-30 12:24:26,275: train_basin_file: train_basin_file_template\n",
      "2024-10-30 12:24:26,276: validation_basin_file: train_basin_file_template\n",
      "2024-10-30 12:24:26,278: test_basin_file: train_basin_file_template\n",
      "2024-10-30 12:24:26,281: train_start_date: 1981-10-01 00:00:00\n",
      "2024-10-30 12:24:26,283: train_end_date: 1997-09-30 00:00:00\n",
      "2024-10-30 12:24:26,285: validation_start_date: 1997-10-01 00:00:00\n",
      "2024-10-30 12:24:26,287: validation_end_date: 2000-09-30 00:00:00\n",
      "2024-10-30 12:24:26,289: test_start_date: 2000-10-01 00:00:00\n",
      "2024-10-30 12:24:26,291: test_end_date: 2005-09-30 00:00:00\n",
      "2024-10-30 12:24:26,291: device: cuda:0\n",
      "2024-10-30 12:24:26,292: physics_informed: False\n",
      "2024-10-30 12:24:26,293: validate_every: 1\n",
      "2024-10-30 12:24:26,295: validate_n_random_basins: 1\n",
      "2024-10-30 12:24:26,296: metrics: ['NSE', 'MSE']\n",
      "2024-10-30 12:24:26,297: model: cudalstm\n",
      "2024-10-30 12:24:26,298: head: regression\n",
      "2024-10-30 12:24:26,299: output_activation: linear\n",
      "2024-10-30 12:24:26,299: hidden_size: 64\n",
      "2024-10-30 12:24:26,301: initial_forget_bias: 3\n",
      "2024-10-30 12:24:26,302: output_dropout: 0.4\n",
      "2024-10-30 12:24:26,303: optimizer: Adam\n",
      "2024-10-30 12:24:26,305: loss: MSE\n",
      "2024-10-30 12:24:26,307: learning_rate: 0.001\n",
      "2024-10-30 12:24:26,308: batch_size: 256\n",
      "2024-10-30 12:24:26,309: epochs: 32\n",
      "2024-10-30 12:24:26,310: clip_gradient_norm: 1\n",
      "2024-10-30 12:24:26,311: predict_last_n: 1\n",
      "2024-10-30 12:24:26,313: seq_length: 90\n",
      "2024-10-30 12:24:26,314: num_workers: 8\n",
      "2024-10-30 12:24:26,315: log_interval: 4\n",
      "2024-10-30 12:24:26,317: log_tensorboard: True\n",
      "2024-10-30 12:24:26,318: log_n_figures: 1\n",
      "2024-10-30 12:24:26,319: save_weights_every: 1\n",
      "2024-10-30 12:24:26,322: dataset: tuler\n",
      "2024-10-30 12:24:26,324: data_dir: F:\\Dino\\UCB-USACE-LSTMs\\data\n",
      "2024-10-30 12:24:26,326: dynamic_inputs: ['MF_TuleR_S10PRECIP-INC', 'MF_TuleR_S10TEMPERATURE-AIR', 'MF_TuleR_S20PRECIP-INC', 'MF_TuleR_S20TEMPERATURE-AIR', 'NF_TuleR_S10PRECIP-INC', 'NF_TuleR_S10TEMPERATURE-AIR', 'SF_TuleR_S10PRECIP-INC', 'SF_TuleR_S10TEMPERATURE-AIR', 'TuleR_S10PRECIP-INC', 'TuleR_S10TEMPERATURE-AIR', 'TuleR_S20PRECIP-INC', 'TuleR_S20TEMPERATURE-AIR']\n",
      "2024-10-30 12:24:26,327: target_variables: ['ReservoirInflowFLOW-OBSERVED']\n",
      "2024-10-30 12:24:26,329: number_of_basins: 1\n",
      "2024-10-30 12:24:26,330: run_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_122426\n",
      "2024-10-30 12:24:26,331: train_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_122426\\train_data\n",
      "2024-10-30 12:24:26,333: img_log_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_122426\\img_log\n",
      "2024-10-30 12:24:26,405: ### Device cuda:0 will be used for training\n",
      "2024-10-30 12:24:26,408: Loading basin data into xarray data set.\n",
      "100%|██████████| 1/1 [00:00<00:00,  6.98it/s]\n",
      "2024-10-30 12:24:26,586: Create lookup table and convert to pytorch tensor\n",
      "100%|██████████| 1/1 [00:02<00:00,  2.72s/it]\n",
      "# Epoch 1: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.2178]\n",
      "2024-10-30 12:25:26,702: Epoch 1 average loss: avg_loss: 0.34730, avg_total_loss: 0.34730\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  1.49it/s]\n",
      "2024-10-30 12:25:27,893: Epoch 1 average validation loss: 0.17508 -- Median validation metrics: avg_loss: 0.17508, NSE: 0.59977, MSE: 83007.05469\n",
      "# Epoch 2: 100%|██████████| 23/23 [00:57<00:00,  2.50s/it, Loss: 0.0729]\n",
      "2024-10-30 12:26:25,295: Epoch 2 average loss: avg_loss: 0.25367, avg_total_loss: 0.25367\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  9.05it/s]\n",
      "2024-10-30 12:26:25,873: Epoch 2 average validation loss: 0.13367 -- Median validation metrics: avg_loss: 0.13367, NSE: 0.69462, MSE: 63333.67188\n",
      "# Epoch 3: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.1434]\n",
      "2024-10-30 12:27:22,054: Epoch 3 average loss: avg_loss: 0.21640, avg_total_loss: 0.21640\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 10.57it/s]\n",
      "2024-10-30 12:27:22,593: Epoch 3 average validation loss: 0.11417 -- Median validation metrics: avg_loss: 0.11417, NSE: 0.73930, MSE: 54067.57031\n",
      "# Epoch 4: 100%|██████████| 23/23 [00:57<00:00,  2.50s/it, Loss: 0.1729]\n",
      "2024-10-30 12:28:20,097: Epoch 4 average loss: avg_loss: 0.20104, avg_total_loss: 0.20104\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  9.39it/s]\n",
      "2024-10-30 12:28:20,636: Epoch 4 average validation loss: 0.09957 -- Median validation metrics: avg_loss: 0.09957, NSE: 0.77260, MSE: 47161.55469\n",
      "# Epoch 5: 100%|██████████| 23/23 [00:55<00:00,  2.43s/it, Loss: 0.1317]\n",
      "2024-10-30 12:29:16,602: Epoch 5 average loss: avg_loss: 0.17159, avg_total_loss: 0.17159\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  9.76it/s]\n",
      "2024-10-30 12:29:17,152: Epoch 5 average validation loss: 0.09808 -- Median validation metrics: avg_loss: 0.09808, NSE: 0.77588, MSE: 46481.59766\n",
      "# Epoch 6: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.0629]\n",
      "2024-10-30 12:30:12,822: Epoch 6 average loss: avg_loss: 0.16260, avg_total_loss: 0.16260\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  7.51it/s]\n",
      "2024-10-30 12:30:13,351: Epoch 6 average validation loss: 0.10033 -- Median validation metrics: avg_loss: 0.10033, NSE: 0.77108, MSE: 47478.03516\n",
      "# Epoch 7: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.1118]\n",
      "2024-10-30 12:31:08,202: Epoch 7 average loss: avg_loss: 0.15077, avg_total_loss: 0.15077\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  9.55it/s]\n",
      "2024-10-30 12:31:08,734: Epoch 7 average validation loss: 0.08340 -- Median validation metrics: avg_loss: 0.08340, NSE: 0.81011, MSE: 39383.16016\n",
      "# Epoch 8: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.0572]\n",
      "2024-10-30 12:32:04,152: Epoch 8 average loss: avg_loss: 0.14285, avg_total_loss: 0.14285\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  9.79it/s]\n",
      "2024-10-30 12:32:04,713: Epoch 8 average validation loss: 0.08760 -- Median validation metrics: avg_loss: 0.08760, NSE: 0.80061, MSE: 41353.32422\n",
      "# Epoch 9: 100%|██████████| 23/23 [00:54<00:00,  2.39s/it, Loss: 0.0688]\n",
      "2024-10-30 12:32:59,666: Epoch 9 average loss: avg_loss: 0.13490, avg_total_loss: 0.13490\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  8.13it/s]\n",
      "2024-10-30 12:33:00,206: Epoch 9 average validation loss: 0.08004 -- Median validation metrics: avg_loss: 0.08004, NSE: 0.81728, MSE: 37894.46484\n",
      "# Epoch 10: 100%|██████████| 23/23 [00:56<00:00,  2.46s/it, Loss: 0.2847]\n",
      "2024-10-30 12:33:56,732: Epoch 10 average loss: avg_loss: 0.13261, avg_total_loss: 0.13261\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 11.68it/s]\n",
      "2024-10-30 12:33:57,298: Epoch 10 average validation loss: 0.07617 -- Median validation metrics: avg_loss: 0.07617, NSE: 0.82709, MSE: 35861.47266\n",
      "# Epoch 11: 100%|██████████| 23/23 [00:57<00:00,  2.49s/it, Loss: 0.0597]\n",
      "2024-10-30 12:34:54,466: Epoch 11 average loss: avg_loss: 0.12066, avg_total_loss: 0.12066\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 11.29it/s]\n",
      "2024-10-30 12:34:54,997: Epoch 11 average validation loss: 0.08689 -- Median validation metrics: avg_loss: 0.08689, NSE: 0.80190, MSE: 41085.08203\n",
      "# Epoch 12: 100%|██████████| 23/23 [00:57<00:00,  2.51s/it, Loss: 0.2140]\n",
      "2024-10-30 12:35:52,681: Epoch 12 average loss: avg_loss: 0.11863, avg_total_loss: 0.11863\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  9.05it/s]\n",
      "2024-10-30 12:35:53,265: Epoch 12 average validation loss: 0.07812 -- Median validation metrics: avg_loss: 0.07812, NSE: 0.82306, MSE: 36697.22656\n",
      "# Epoch 13: 100%|██████████| 23/23 [00:56<00:00,  2.47s/it, Loss: 0.0789]\n",
      "2024-10-30 12:36:50,113: Epoch 13 average loss: avg_loss: 0.11328, avg_total_loss: 0.11328\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  8.37it/s]\n",
      "2024-10-30 12:36:50,649: Epoch 13 average validation loss: 0.07909 -- Median validation metrics: avg_loss: 0.07909, NSE: 0.81961, MSE: 37412.05859\n",
      "# Epoch 14: 100%|██████████| 23/23 [00:56<00:00,  2.46s/it, Loss: 0.0376]\n",
      "2024-10-30 12:37:47,217: Epoch 14 average loss: avg_loss: 0.10419, avg_total_loss: 0.10419\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 10.68it/s]\n",
      "2024-10-30 12:37:47,782: Epoch 14 average validation loss: 0.06869 -- Median validation metrics: avg_loss: 0.06869, NSE: 0.84352, MSE: 32453.98828\n",
      "# Epoch 15: 100%|██████████| 23/23 [00:59<00:00,  2.58s/it, Loss: 0.0380]\n",
      "2024-10-30 12:38:47,108: Epoch 15 average loss: avg_loss: 0.10026, avg_total_loss: 0.10026\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 10.15it/s]\n",
      "2024-10-30 12:38:47,705: Epoch 15 average validation loss: 0.11129 -- Median validation metrics: avg_loss: 0.11129, NSE: 0.74607, MSE: 52663.75000\n",
      "# Epoch 16: 100%|██████████| 23/23 [00:58<00:00,  2.54s/it, Loss: 0.0353]\n",
      "2024-10-30 12:39:46,113: Epoch 16 average loss: avg_loss: 0.09324, avg_total_loss: 0.09324\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 10.35it/s]\n",
      "2024-10-30 12:39:46,677: Epoch 16 average validation loss: 0.06881 -- Median validation metrics: avg_loss: 0.06881, NSE: 0.84318, MSE: 32524.16016\n",
      "# Epoch 17: 100%|██████████| 23/23 [00:56<00:00,  2.46s/it, Loss: 0.0958]\n",
      "2024-10-30 12:40:43,271: Epoch 17 average loss: avg_loss: 0.09716, avg_total_loss: 0.09716\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  8.72it/s]\n",
      "2024-10-30 12:40:43,821: Epoch 17 average validation loss: 0.06997 -- Median validation metrics: avg_loss: 0.06997, NSE: 0.84091, MSE: 32993.94922\n",
      "# Epoch 18: 100%|██████████| 23/23 [00:57<00:00,  2.52s/it, Loss: 0.0360]\n",
      "2024-10-30 12:41:41,691: Epoch 18 average loss: avg_loss: 0.08966, avg_total_loss: 0.08966\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 11.28it/s]\n",
      "2024-10-30 12:41:42,244: Epoch 18 average validation loss: 0.07841 -- Median validation metrics: avg_loss: 0.07841, NSE: 0.82171, MSE: 36976.03516\n",
      "# Epoch 19: 100%|██████████| 23/23 [00:58<00:00,  2.55s/it, Loss: 0.1169]\n",
      "2024-10-30 12:42:40,804: Epoch 19 average loss: avg_loss: 0.09570, avg_total_loss: 0.09570\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 10.25it/s]\n",
      "2024-10-30 12:42:41,335: Epoch 19 average validation loss: 0.10027 -- Median validation metrics: avg_loss: 0.10027, NSE: 0.77138, MSE: 47415.41016\n",
      "# Epoch 20: 100%|██████████| 23/23 [00:57<00:00,  2.51s/it, Loss: 0.0396]\n",
      "2024-10-30 12:43:39,085: Epoch 20 average loss: avg_loss: 0.08908, avg_total_loss: 0.08908\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 11.04it/s]\n",
      "2024-10-30 12:43:39,695: Epoch 20 average validation loss: 0.06766 -- Median validation metrics: avg_loss: 0.06766, NSE: 0.84574, MSE: 31992.27344\n",
      "# Epoch 21: 100%|██████████| 23/23 [00:56<00:00,  2.47s/it, Loss: 0.0251]\n",
      "2024-10-30 12:44:36,514: Epoch 21 average loss: avg_loss: 0.08243, avg_total_loss: 0.08243\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  8.96it/s]\n",
      "2024-10-30 12:44:37,107: Epoch 21 average validation loss: 0.07827 -- Median validation metrics: avg_loss: 0.07827, NSE: 0.82407, MSE: 36487.85547\n",
      "# Epoch 22: 100%|██████████| 23/23 [00:58<00:00,  2.52s/it, Loss: 0.0290]\n",
      "2024-10-30 12:45:35,141: Epoch 22 average loss: avg_loss: 0.08419, avg_total_loss: 0.08419\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  8.10it/s]\n",
      "2024-10-30 12:45:35,766: Epoch 22 average validation loss: 0.09434 -- Median validation metrics: avg_loss: 0.09434, NSE: 0.78536, MSE: 44515.35938\n",
      "# Epoch 23: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.0397]\n",
      "2024-10-30 12:46:31,159: Epoch 23 average loss: avg_loss: 0.07742, avg_total_loss: 0.07742\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  9.02it/s]\n",
      "2024-10-30 12:46:31,790: Epoch 23 average validation loss: 0.07452 -- Median validation metrics: avg_loss: 0.07452, NSE: 0.83093, MSE: 35065.40625\n",
      "# Epoch 24: 100%|██████████| 23/23 [00:56<00:00,  2.45s/it, Loss: 0.0455]\n",
      "2024-10-30 12:47:28,254: Epoch 24 average loss: avg_loss: 0.08571, avg_total_loss: 0.08571\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 10.98it/s]\n",
      "2024-10-30 12:47:28,841: Epoch 24 average validation loss: 0.08623 -- Median validation metrics: avg_loss: 0.08623, NSE: 0.80374, MSE: 40704.19531\n",
      "# Epoch 25: 100%|██████████| 23/23 [00:57<00:00,  2.48s/it, Loss: 0.0452]\n",
      "2024-10-30 12:48:26,007: Epoch 25 average loss: avg_loss: 0.07589, avg_total_loss: 0.07589\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  9.10it/s]\n",
      "2024-10-30 12:48:26,598: Epoch 25 average validation loss: 0.07372 -- Median validation metrics: avg_loss: 0.07372, NSE: 0.83370, MSE: 34490.80469\n",
      "# Epoch 26: 100%|██████████| 23/23 [00:56<00:00,  2.48s/it, Loss: 0.0297]\n",
      "2024-10-30 12:49:23,559: Epoch 26 average loss: avg_loss: 0.06943, avg_total_loss: 0.06943\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 10.38it/s]\n",
      "2024-10-30 12:49:24,061: Epoch 26 average validation loss: 0.09482 -- Median validation metrics: avg_loss: 0.09482, NSE: 0.78355, MSE: 44890.94922\n",
      "# Epoch 27: 100%|██████████| 23/23 [00:56<00:00,  2.45s/it, Loss: 0.0215]\n",
      "2024-10-30 12:50:20,326: Epoch 27 average loss: avg_loss: 0.07953, avg_total_loss: 0.07953\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 11.00it/s]\n",
      "2024-10-30 12:50:20,928: Epoch 27 average validation loss: 0.09141 -- Median validation metrics: avg_loss: 0.09141, NSE: 0.79190, MSE: 43160.03125\n",
      "# Epoch 28: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0908]\n",
      "2024-10-30 12:51:16,176: Epoch 28 average loss: avg_loss: 0.08197, avg_total_loss: 0.08197\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  8.63it/s]\n",
      "2024-10-30 12:51:16,777: Epoch 28 average validation loss: 0.08879 -- Median validation metrics: avg_loss: 0.08879, NSE: 0.79895, MSE: 41696.74609\n",
      "# Epoch 29: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.1793]\n",
      "2024-10-30 12:52:11,460: Epoch 29 average loss: avg_loss: 0.07578, avg_total_loss: 0.07578\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  9.02it/s]\n",
      "2024-10-30 12:52:12,052: Epoch 29 average validation loss: 0.06965 -- Median validation metrics: avg_loss: 0.06965, NSE: 0.84230, MSE: 32706.67969\n",
      "# Epoch 30: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.1000]\n",
      "2024-10-30 12:53:08,134: Epoch 30 average loss: avg_loss: 0.07530, avg_total_loss: 0.07530\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 11.11it/s]\n",
      "2024-10-30 12:53:08,707: Epoch 30 average validation loss: 0.08555 -- Median validation metrics: avg_loss: 0.08555, NSE: 0.80498, MSE: 40447.19141\n",
      "# Epoch 31: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.0607]\n",
      "2024-10-30 12:54:03,490: Epoch 31 average loss: avg_loss: 0.06945, avg_total_loss: 0.06945\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  8.57it/s]\n",
      "2024-10-30 12:54:04,120: Epoch 31 average validation loss: 0.08702 -- Median validation metrics: avg_loss: 0.08702, NSE: 0.80174, MSE: 41118.67578\n",
      "# Epoch 32: 100%|██████████| 23/23 [00:56<00:00,  2.45s/it, Loss: 0.0341]\n",
      "2024-10-30 12:55:00,572: Epoch 32 average loss: avg_loss: 0.06801, avg_total_loss: 0.06801\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00, 10.43it/s]\n",
      "2024-10-30 12:55:01,122: Epoch 32 average validation loss: 0.07615 -- Median validation metrics: avg_loss: 0.07615, NSE: 0.82690, MSE: 35900.49219\n",
      "2024-10-30 12:55:01,213: Using the model weights from F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_122426\\model_epoch032.pt\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\..\\..\\..\\UCB-USACE-LSTMs\\neuralhydrology\\evaluation\\tester.py:133: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  self.model.load_state_dict(torch.load(weight_file, map_location=self.device))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Evaluation: 100%|██████████| 1/1 [00:00<00:00,  3.59it/s]\n",
      "2024-10-30 12:55:01,551: Stored metrics at F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_122426\\test\\model_epoch032\\test_metrics.csv\n",
      "2024-10-30 12:55:01,556: Stored results at F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_122426\\test\\model_epoch032\\test_results.p\n"
     ]
    }
   ],
   "source": [
    "trainer.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\..\\..\\..\\UCB-USACE-LSTMs\\neuralhydrology\\datautils\\utils.py:339: FutureWarning: 'H' is deprecated and will be removed in a future version, please use 'h' instead.\n",
      "  offset_one = to_offset(freq_one)\n",
      "F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\..\\..\\..\\UCB-USACE-LSTMs\\neuralhydrology\\datautils\\utils.py:382: FutureWarning: 'H' is deprecated and will be removed in a future version. Please use 'h' instead of 'H'.\n",
      "  factor = pd.to_timedelta(freq_one) / pd.to_timedelta(freq_two)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "{'NSE': 0.47308748960494995,\n",
       " 'MSE': 27019.154296875,\n",
       " 'RMSE': 164.3750415874472,\n",
       " 'KGE': 0.6721112510897413,\n",
       " 'Alpha-NSE': 0.9581069642284142,\n",
       " 'Beta-KGE': 1.1848461627960205,\n",
       " 'Beta-NSE': 0.11160923956557077,\n",
       " 'Pearson-r': 0.732440845203603,\n",
       " 'FHV': -2.296738885343075,\n",
       " 'FMS': 11.356460551582677,\n",
       " 'FLV': -463.81657586650454,\n",
       " 'Peak-Timing': 0.2857142857142857,\n",
       " 'Peak-MAPE': 33.331503186907085}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainer.results()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# .311"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#CHANGE\n",
    "path_to_csv = Path('F:/Dino/UCB-USACE-LSTMs/data/')\n",
    "params = {'learning_rate': 0.001, 'batch_size': 256, 'epochs': 32, 'seq_length' : 90, 'output_dropout' : 0.4, 'validate_every': 1, 'save_weights_every': 1}\n",
    "num_ensemble_members = 10\n",
    "trainer = UCB_trainer(path_to_csv, params, num_ensemble_members)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2024-10-30 12:55:02,203: Logging to F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\output.log initialized.\n",
      "2024-10-30 12:55:02,212: ### Folder structure created at F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\n",
      "2024-10-30 12:55:02,212: ### Run configurations for testing_run\n",
      "2024-10-30 12:55:02,212: experiment_name: testing_run\n",
      "2024-10-30 12:55:02,212: train_basin_file: train_basin_file_template\n",
      "2024-10-30 12:55:02,212: validation_basin_file: train_basin_file_template\n",
      "2024-10-30 12:55:02,212: test_basin_file: train_basin_file_template\n",
      "2024-10-30 12:55:02,212: train_start_date: 1981-10-01 00:00:00\n",
      "2024-10-30 12:55:02,212: train_end_date: 1997-09-30 00:00:00\n",
      "2024-10-30 12:55:02,212: validation_start_date: 1997-10-01 00:00:00\n",
      "2024-10-30 12:55:02,212: validation_end_date: 2000-09-30 00:00:00\n",
      "2024-10-30 12:55:02,212: test_start_date: 2000-10-01 00:00:00\n",
      "2024-10-30 12:55:02,212: test_end_date: 2005-09-30 00:00:00\n",
      "2024-10-30 12:55:02,228: device: cpu\n",
      "2024-10-30 12:55:02,229: physics_informed: True\n",
      "2024-10-30 12:55:02,229: validate_every: 1\n",
      "2024-10-30 12:55:02,229: validate_n_random_basins: 1\n",
      "2024-10-30 12:55:02,229: metrics: ['NSE', 'MSE']\n",
      "2024-10-30 12:55:02,229: model: cudalstm\n",
      "2024-10-30 12:55:02,229: head: regression\n",
      "2024-10-30 12:55:02,229: output_activation: linear\n",
      "2024-10-30 12:55:02,229: hidden_size: 64\n",
      "2024-10-30 12:55:02,229: initial_forget_bias: 3\n",
      "2024-10-30 12:55:02,245: output_dropout: 0.4\n",
      "2024-10-30 12:55:02,248: optimizer: Adam\n",
      "2024-10-30 12:55:02,248: loss: MSE\n",
      "2024-10-30 12:55:02,248: learning_rate: 0.001\n",
      "2024-10-30 12:55:02,248: batch_size: 256\n",
      "2024-10-30 12:55:02,248: epochs: 32\n",
      "2024-10-30 12:55:02,248: clip_gradient_norm: 1\n",
      "2024-10-30 12:55:02,248: predict_last_n: 1\n",
      "2024-10-30 12:55:02,248: seq_length: 90\n",
      "2024-10-30 12:55:02,261: num_workers: 8\n",
      "2024-10-30 12:55:02,263: log_interval: 4\n",
      "2024-10-30 12:55:02,264: log_tensorboard: True\n",
      "2024-10-30 12:55:02,266: log_n_figures: 1\n",
      "2024-10-30 12:55:02,268: save_weights_every: 1\n",
      "2024-10-30 12:55:02,269: dataset: tuler\n",
      "2024-10-30 12:55:02,270: data_dir: F:\\Dino\\UCB-USACE-LSTMs\\data\n",
      "2024-10-30 12:55:02,270: dynamic_inputs: ['MF_TuleR_S10PRECIP-INC', 'MF_TuleR_S10TEMPERATURE-AIR', 'MF_TuleR_S20PRECIP-INC', 'MF_TuleR_S20TEMPERATURE-AIR', 'NF_TuleR_S10PRECIP-INC', 'NF_TuleR_S10TEMPERATURE-AIR', 'SF_TuleR_S10PRECIP-INC', 'SF_TuleR_S10TEMPERATURE-AIR', 'TuleR_S10PRECIP-INC', 'TuleR_S10TEMPERATURE-AIR', 'TuleR_S20PRECIP-INC', 'TuleR_S20TEMPERATURE-AIR']\n",
      "2024-10-30 12:55:02,270: target_variables: ['ReservoirInflowFLOW-OBSERVED']\n",
      "2024-10-30 12:55:02,270: number_of_basins: 1\n",
      "2024-10-30 12:55:02,270: run_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\n",
      "2024-10-30 12:55:02,270: train_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\train_data\n",
      "2024-10-30 12:55:02,270: img_log_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\img_log\n",
      "2024-10-30 12:55:02,283: ### Device cpu will be used for training\n",
      "2024-10-30 12:55:02,285: Loading basin data into xarray data set.\n",
      "100%|██████████| 1/1 [00:00<00:00,  8.55it/s]\n",
      "2024-10-30 12:55:02,430: Create lookup table and convert to pytorch tensor\n",
      "100%|██████████| 1/1 [00:00<00:00, 10.98it/s]\n",
      "# Epoch 1: 100%|██████████| 23/23 [00:57<00:00,  2.50s/it, Loss: 0.1782]\n",
      "2024-10-30 12:56:00,801: Epoch 1 average loss: avg_loss: 0.37874, avg_total_loss: 0.37874\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  2.67it/s]\n",
      "2024-10-30 12:56:01,603: Epoch 1 average validation loss: 0.18850 -- Median validation metrics: avg_loss: 0.18850, NSE: 0.56942, MSE: 89301.39062\n",
      "# Epoch 2: 100%|██████████| 23/23 [00:56<00:00,  2.47s/it, Loss: 0.1655]\n",
      "2024-10-30 12:56:58,385: Epoch 2 average loss: avg_loss: 0.26827, avg_total_loss: 0.26827\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.94it/s]\n",
      "2024-10-30 12:56:59,035: Epoch 2 average validation loss: 0.13681 -- Median validation metrics: avg_loss: 0.13681, NSE: 0.68807, MSE: 64693.03516\n",
      "# Epoch 3: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.3405]\n",
      "2024-10-30 12:57:54,295: Epoch 3 average loss: avg_loss: 0.23034, avg_total_loss: 0.23034\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.88it/s]\n",
      "2024-10-30 12:57:54,903: Epoch 3 average validation loss: 0.12590 -- Median validation metrics: avg_loss: 0.12590, NSE: 0.71260, MSE: 59606.28906\n",
      "# Epoch 4: 100%|██████████| 23/23 [00:54<00:00,  2.39s/it, Loss: 0.1098]\n",
      "2024-10-30 12:58:49,896: Epoch 4 average loss: avg_loss: 0.18897, avg_total_loss: 0.18897\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.17it/s]\n",
      "2024-10-30 12:58:50,551: Epoch 4 average validation loss: 0.10828 -- Median validation metrics: avg_loss: 0.10828, NSE: 0.75317, MSE: 51190.92969\n",
      "# Epoch 5: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.0930]\n",
      "2024-10-30 12:59:46,714: Epoch 5 average loss: avg_loss: 0.17400, avg_total_loss: 0.17400\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.49it/s]\n",
      "2024-10-30 12:59:47,373: Epoch 5 average validation loss: 0.10066 -- Median validation metrics: avg_loss: 0.10066, NSE: 0.77015, MSE: 47669.55469\n",
      "# Epoch 6: 100%|██████████| 23/23 [00:53<00:00,  2.32s/it, Loss: 0.0627]\n",
      "2024-10-30 13:00:40,781: Epoch 6 average loss: avg_loss: 0.15603, avg_total_loss: 0.15603\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 13:00:41,432: Epoch 6 average validation loss: 0.08439 -- Median validation metrics: avg_loss: 0.08439, NSE: 0.80766, MSE: 39891.31250\n",
      "# Epoch 7: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.0599]\n",
      "2024-10-30 13:01:36,142: Epoch 7 average loss: avg_loss: 0.14037, avg_total_loss: 0.14037\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.58it/s]\n",
      "2024-10-30 13:01:36,750: Epoch 7 average validation loss: 0.09909 -- Median validation metrics: avg_loss: 0.09909, NSE: 0.77414, MSE: 46842.58203\n",
      "# Epoch 8: 100%|██████████| 23/23 [00:53<00:00,  2.32s/it, Loss: 0.0332]\n",
      "2024-10-30 13:02:30,178: Epoch 8 average loss: avg_loss: 0.13858, avg_total_loss: 0.13858\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.57it/s]\n",
      "2024-10-30 13:02:30,773: Epoch 8 average validation loss: 0.11224 -- Median validation metrics: avg_loss: 0.11224, NSE: 0.74378, MSE: 53138.69922\n",
      "# Epoch 9: 100%|██████████| 23/23 [00:54<00:00,  2.35s/it, Loss: 0.4945]\n",
      "2024-10-30 13:03:24,895: Epoch 9 average loss: avg_loss: 0.13879, avg_total_loss: 0.13879\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 13:03:25,555: Epoch 9 average validation loss: 0.10876 -- Median validation metrics: avg_loss: 0.10876, NSE: 0.75280, MSE: 51269.22656\n",
      "# Epoch 10: 100%|██████████| 23/23 [00:54<00:00,  2.36s/it, Loss: 0.0786]\n",
      "2024-10-30 13:04:19,960: Epoch 10 average loss: avg_loss: 0.12015, avg_total_loss: 0.12015\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.88it/s]\n",
      "2024-10-30 13:04:20,651: Epoch 10 average validation loss: 0.11267 -- Median validation metrics: avg_loss: 0.11267, NSE: 0.74307, MSE: 53286.88672\n",
      "# Epoch 11: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.0546]\n",
      "2024-10-30 13:05:15,501: Epoch 11 average loss: avg_loss: 0.12235, avg_total_loss: 0.12235\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.49it/s]\n",
      "2024-10-30 13:05:16,253: Epoch 11 average validation loss: 0.12376 -- Median validation metrics: avg_loss: 0.12376, NSE: 0.71746, MSE: 58598.25000\n",
      "# Epoch 12: 100%|██████████| 23/23 [00:54<00:00,  2.36s/it, Loss: 0.0386]\n",
      "2024-10-30 13:06:10,659: Epoch 12 average loss: avg_loss: 0.10911, avg_total_loss: 0.10911\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.49it/s]\n",
      "2024-10-30 13:06:11,296: Epoch 12 average validation loss: 0.13495 -- Median validation metrics: avg_loss: 0.13495, NSE: 0.69176, MSE: 63928.16016\n",
      "# Epoch 13: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0497]\n",
      "2024-10-30 13:07:06,613: Epoch 13 average loss: avg_loss: 0.10885, avg_total_loss: 0.10885\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.68it/s]\n",
      "2024-10-30 13:07:07,244: Epoch 13 average validation loss: 0.11432 -- Median validation metrics: avg_loss: 0.11432, NSE: 0.73904, MSE: 54121.57812\n",
      "# Epoch 14: 100%|██████████| 23/23 [00:55<00:00,  2.39s/it, Loss: 0.0349]\n",
      "2024-10-30 13:08:02,320: Epoch 14 average loss: avg_loss: 0.09833, avg_total_loss: 0.09833\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.49it/s]\n",
      "2024-10-30 13:08:02,981: Epoch 14 average validation loss: 0.12824 -- Median validation metrics: avg_loss: 0.12824, NSE: 0.70911, MSE: 60329.92188\n",
      "# Epoch 15: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.4186]\n",
      "2024-10-30 13:08:58,729: Epoch 15 average loss: avg_loss: 0.10940, avg_total_loss: 0.10940\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.67it/s]\n",
      "2024-10-30 13:08:59,327: Epoch 15 average validation loss: 0.11159 -- Median validation metrics: avg_loss: 0.11159, NSE: 0.74552, MSE: 52777.25391\n",
      "# Epoch 16: 100%|██████████| 23/23 [00:49<00:00,  2.16s/it, Loss: 0.0834]\n",
      "2024-10-30 13:09:48,972: Epoch 16 average loss: avg_loss: 0.09733, avg_total_loss: 0.09733\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 13:09:49,591: Epoch 16 average validation loss: 0.11937 -- Median validation metrics: avg_loss: 0.11937, NSE: 0.72783, MSE: 56447.79688\n",
      "# Epoch 17: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.0512]\n",
      "2024-10-30 13:10:45,347: Epoch 17 average loss: avg_loss: 0.09434, avg_total_loss: 0.09434\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.54it/s]\n",
      "2024-10-30 13:10:45,953: Epoch 17 average validation loss: 0.11671 -- Median validation metrics: avg_loss: 0.11671, NSE: 0.73466, MSE: 55030.97656\n",
      "# Epoch 18: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0456]\n",
      "2024-10-30 13:11:41,199: Epoch 18 average loss: avg_loss: 0.09998, avg_total_loss: 0.09998\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.80it/s]\n",
      "2024-10-30 13:11:41,799: Epoch 18 average validation loss: 0.10342 -- Median validation metrics: avg_loss: 0.10342, NSE: 0.76415, MSE: 48914.46875\n",
      "# Epoch 19: 100%|██████████| 23/23 [00:56<00:00,  2.46s/it, Loss: 0.0608]\n",
      "2024-10-30 13:12:38,440: Epoch 19 average loss: avg_loss: 0.09449, avg_total_loss: 0.09449\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.49it/s]\n",
      "2024-10-30 13:12:39,079: Epoch 19 average validation loss: 0.12144 -- Median validation metrics: avg_loss: 0.12144, NSE: 0.72349, MSE: 57347.05078\n",
      "# Epoch 20: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.3412]\n",
      "2024-10-30 13:13:34,719: Epoch 20 average loss: avg_loss: 0.09446, avg_total_loss: 0.09446\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.58it/s]\n",
      "2024-10-30 13:13:35,321: Epoch 20 average validation loss: 0.10195 -- Median validation metrics: avg_loss: 0.10195, NSE: 0.76734, MSE: 48251.89844\n",
      "# Epoch 21: 100%|██████████| 23/23 [00:54<00:00,  2.36s/it, Loss: 0.1226]\n",
      "2024-10-30 13:14:29,648: Epoch 21 average loss: avg_loss: 0.08728, avg_total_loss: 0.08728\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.74it/s]\n",
      "2024-10-30 13:14:30,247: Epoch 21 average validation loss: 0.10589 -- Median validation metrics: avg_loss: 0.10589, NSE: 0.75829, MSE: 50129.58594\n",
      "# Epoch 22: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.0992]\n",
      "2024-10-30 13:15:24,932: Epoch 22 average loss: avg_loss: 0.09703, avg_total_loss: 0.09703\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 13:15:25,564: Epoch 22 average validation loss: 0.09250 -- Median validation metrics: avg_loss: 0.09250, NSE: 0.78988, MSE: 43579.05078\n",
      "# Epoch 23: 100%|██████████| 23/23 [00:53<00:00,  2.33s/it, Loss: 0.4003]\n",
      "2024-10-30 13:16:19,255: Epoch 23 average loss: avg_loss: 0.09465, avg_total_loss: 0.09465\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.15it/s]\n",
      "2024-10-30 13:16:19,907: Epoch 23 average validation loss: 0.11045 -- Median validation metrics: avg_loss: 0.11045, NSE: 0.74782, MSE: 52300.96484\n",
      "# Epoch 24: 100%|██████████| 23/23 [00:54<00:00,  2.36s/it, Loss: 0.1080]\n",
      "2024-10-30 13:17:14,270: Epoch 24 average loss: avg_loss: 0.09062, avg_total_loss: 0.09062\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 13:17:14,870: Epoch 24 average validation loss: 0.11521 -- Median validation metrics: avg_loss: 0.11521, NSE: 0.73709, MSE: 54527.52344\n",
      "# Epoch 25: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0448]\n",
      "2024-10-30 13:18:10,022: Epoch 25 average loss: avg_loss: 0.08495, avg_total_loss: 0.08495\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.95it/s]\n",
      "2024-10-30 13:18:10,613: Epoch 25 average validation loss: 0.10943 -- Median validation metrics: avg_loss: 0.10943, NSE: 0.75042, MSE: 51761.97266\n",
      "# Epoch 26: 100%|██████████| 23/23 [00:54<00:00,  2.37s/it, Loss: 0.0499]\n",
      "2024-10-30 13:19:05,129: Epoch 26 average loss: avg_loss: 0.08502, avg_total_loss: 0.08502\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 13:19:05,753: Epoch 26 average validation loss: 0.10501 -- Median validation metrics: avg_loss: 0.10501, NSE: 0.76073, MSE: 49624.14062\n",
      "# Epoch 27: 100%|██████████| 23/23 [00:55<00:00,  2.43s/it, Loss: 0.0304]\n",
      "2024-10-30 13:20:01,567: Epoch 27 average loss: avg_loss: 0.08281, avg_total_loss: 0.08281\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.53it/s]\n",
      "2024-10-30 13:20:02,372: Epoch 27 average validation loss: 0.09628 -- Median validation metrics: avg_loss: 0.09628, NSE: 0.78040, MSE: 45544.25000\n",
      "# Epoch 28: 100%|██████████| 23/23 [00:53<00:00,  2.32s/it, Loss: 0.1427]\n",
      "2024-10-30 13:20:55,751: Epoch 28 average loss: avg_loss: 0.08038, avg_total_loss: 0.08038\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 13:20:56,385: Epoch 28 average validation loss: 0.10298 -- Median validation metrics: avg_loss: 0.10298, NSE: 0.76531, MSE: 48674.07812\n",
      "# Epoch 29: 100%|██████████| 23/23 [00:56<00:00,  2.46s/it, Loss: 0.0550]\n",
      "2024-10-30 13:21:52,990: Epoch 29 average loss: avg_loss: 0.07318, avg_total_loss: 0.07318\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.08it/s]\n",
      "2024-10-30 13:21:53,641: Epoch 29 average validation loss: 0.10578 -- Median validation metrics: avg_loss: 0.10578, NSE: 0.75863, MSE: 50060.11328\n",
      "# Epoch 30: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.0211]\n",
      "2024-10-30 13:22:49,247: Epoch 30 average loss: avg_loss: 0.07650, avg_total_loss: 0.07650\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.41it/s]\n",
      "2024-10-30 13:22:50,321: Epoch 30 average validation loss: 0.09728 -- Median validation metrics: avg_loss: 0.09728, NSE: 0.77792, MSE: 46059.21094\n",
      "# Epoch 31: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.0418]\n",
      "2024-10-30 13:23:46,103: Epoch 31 average loss: avg_loss: 0.07453, avg_total_loss: 0.07453\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.20it/s]\n",
      "2024-10-30 13:23:46,834: Epoch 31 average validation loss: 0.09954 -- Median validation metrics: avg_loss: 0.09954, NSE: 0.77317, MSE: 47043.36328\n",
      "# Epoch 32: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.0323]\n",
      "2024-10-30 13:24:43,073: Epoch 32 average loss: avg_loss: 0.07343, avg_total_loss: 0.07343\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.81it/s]\n",
      "2024-10-30 13:24:43,755: Epoch 32 average validation loss: 0.11556 -- Median validation metrics: avg_loss: 0.11556, NSE: 0.73603, MSE: 54746.94531\n",
      "2024-10-30 13:24:43,796: Logging to F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\output.log initialized.\n",
      "2024-10-30 13:24:43,796: ### Folder structure created at F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\n",
      "2024-10-30 13:24:43,796: ### Run configurations for testing_run\n",
      "2024-10-30 13:24:43,796: experiment_name: testing_run\n",
      "2024-10-30 13:24:43,796: train_basin_file: train_basin_file_template\n",
      "2024-10-30 13:24:43,796: validation_basin_file: train_basin_file_template\n",
      "2024-10-30 13:24:43,804: test_basin_file: train_basin_file_template\n",
      "2024-10-30 13:24:43,806: train_start_date: 1981-10-01 00:00:00\n",
      "2024-10-30 13:24:43,806: train_end_date: 1997-09-30 00:00:00\n",
      "2024-10-30 13:24:43,806: validation_start_date: 1997-10-01 00:00:00\n",
      "2024-10-30 13:24:43,806: validation_end_date: 2000-09-30 00:00:00\n",
      "2024-10-30 13:24:43,814: test_start_date: 2000-10-01 00:00:00\n",
      "2024-10-30 13:24:43,814: test_end_date: 2005-09-30 00:00:00\n",
      "2024-10-30 13:24:43,816: device: cpu\n",
      "2024-10-30 13:24:43,816: physics_informed: True\n",
      "2024-10-30 13:24:43,816: validate_every: 1\n",
      "2024-10-30 13:24:43,816: validate_n_random_basins: 1\n",
      "2024-10-30 13:24:43,824: metrics: ['NSE', 'MSE']\n",
      "2024-10-30 13:24:43,824: model: cudalstm\n",
      "2024-10-30 13:24:43,826: head: regression\n",
      "2024-10-30 13:24:43,826: output_activation: linear\n",
      "2024-10-30 13:24:43,826: hidden_size: 64\n",
      "2024-10-30 13:24:43,826: initial_forget_bias: 3\n",
      "2024-10-30 13:24:43,826: output_dropout: 0.4\n",
      "2024-10-30 13:24:43,826: optimizer: Adam\n",
      "2024-10-30 13:24:43,835: loss: MSE\n",
      "2024-10-30 13:24:43,835: learning_rate: 0.001\n",
      "2024-10-30 13:24:43,837: batch_size: 256\n",
      "2024-10-30 13:24:43,837: epochs: 32\n",
      "2024-10-30 13:24:43,837: clip_gradient_norm: 1\n",
      "2024-10-30 13:24:43,837: predict_last_n: 1\n",
      "2024-10-30 13:24:43,837: seq_length: 90\n",
      "2024-10-30 13:24:43,837: num_workers: 8\n",
      "2024-10-30 13:24:43,837: log_interval: 4\n",
      "2024-10-30 13:24:43,837: log_tensorboard: True\n",
      "2024-10-30 13:24:43,845: log_n_figures: 1\n",
      "2024-10-30 13:24:43,845: save_weights_every: 1\n",
      "2024-10-30 13:24:43,847: dataset: tuler\n",
      "2024-10-30 13:24:43,847: data_dir: F:\\Dino\\UCB-USACE-LSTMs\\data\n",
      "2024-10-30 13:24:43,847: dynamic_inputs: ['MF_TuleR_S10PRECIP-INC', 'MF_TuleR_S10TEMPERATURE-AIR', 'MF_TuleR_S20PRECIP-INC', 'MF_TuleR_S20TEMPERATURE-AIR', 'NF_TuleR_S10PRECIP-INC', 'NF_TuleR_S10TEMPERATURE-AIR', 'SF_TuleR_S10PRECIP-INC', 'SF_TuleR_S10TEMPERATURE-AIR', 'TuleR_S10PRECIP-INC', 'TuleR_S10TEMPERATURE-AIR', 'TuleR_S20PRECIP-INC', 'TuleR_S20TEMPERATURE-AIR']\n",
      "2024-10-30 13:24:43,847: target_variables: ['ReservoirInflowFLOW-OBSERVED']\n",
      "2024-10-30 13:24:43,847: number_of_basins: 1\n",
      "2024-10-30 13:24:43,847: run_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\n",
      "2024-10-30 13:24:43,847: train_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\train_data\n",
      "2024-10-30 13:24:43,847: img_log_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\img_log\n",
      "2024-10-30 13:24:43,855: seed: 462748\n",
      "2024-10-30 13:24:43,855: commit_hash: 61b768d\n",
      "2024-10-30 13:24:43,857: package_version: 1.11.0\n",
      "2024-10-30 13:24:43,857: ### Device cpu will be used for training\n",
      "2024-10-30 13:24:43,857: Loading basin data into xarray data set.\n",
      "100%|██████████| 1/1 [00:00<00:00,  7.07it/s]\n",
      "2024-10-30 13:24:44,011: Create lookup table and convert to pytorch tensor\n",
      "100%|██████████| 1/1 [00:00<00:00, 10.96it/s]\n",
      "# Epoch 1: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.1782]\n",
      "2024-10-30 13:25:40,344: Epoch 1 average loss: avg_loss: 0.37874, avg_total_loss: 0.37874\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "2024-10-30 13:25:41,136: Epoch 1 average validation loss: 0.18850 -- Median validation metrics: avg_loss: 0.18850, NSE: 0.56942, MSE: 89301.39062\n",
      "# Epoch 2: 100%|██████████| 23/23 [00:54<00:00,  2.39s/it, Loss: 0.1655]\n",
      "2024-10-30 13:26:36,066: Epoch 2 average loss: avg_loss: 0.26827, avg_total_loss: 0.26827\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.34it/s]\n",
      "2024-10-30 13:26:36,703: Epoch 2 average validation loss: 0.13681 -- Median validation metrics: avg_loss: 0.13681, NSE: 0.68807, MSE: 64693.03516\n",
      "# Epoch 3: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.3405]\n",
      "2024-10-30 13:27:32,440: Epoch 3 average loss: avg_loss: 0.23034, avg_total_loss: 0.23034\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.63it/s]\n",
      "2024-10-30 13:27:33,067: Epoch 3 average validation loss: 0.12590 -- Median validation metrics: avg_loss: 0.12590, NSE: 0.71260, MSE: 59606.28906\n",
      "# Epoch 4: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.1098]\n",
      "2024-10-30 13:28:28,229: Epoch 4 average loss: avg_loss: 0.18897, avg_total_loss: 0.18897\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.48it/s]\n",
      "2024-10-30 13:28:28,910: Epoch 4 average validation loss: 0.10828 -- Median validation metrics: avg_loss: 0.10828, NSE: 0.75317, MSE: 51190.92969\n",
      "# Epoch 5: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.0930]\n",
      "2024-10-30 13:29:24,353: Epoch 5 average loss: avg_loss: 0.17400, avg_total_loss: 0.17400\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.15it/s]\n",
      "2024-10-30 13:29:24,970: Epoch 5 average validation loss: 0.10066 -- Median validation metrics: avg_loss: 0.10066, NSE: 0.77015, MSE: 47669.55469\n",
      "# Epoch 6: 100%|██████████| 23/23 [00:53<00:00,  2.32s/it, Loss: 0.0627]\n",
      "2024-10-30 13:30:18,433: Epoch 6 average loss: avg_loss: 0.15603, avg_total_loss: 0.15603\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.81it/s]\n",
      "2024-10-30 13:30:19,043: Epoch 6 average validation loss: 0.08439 -- Median validation metrics: avg_loss: 0.08439, NSE: 0.80766, MSE: 39891.31250\n",
      "# Epoch 7: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0599]\n",
      "2024-10-30 13:31:14,309: Epoch 7 average loss: avg_loss: 0.14037, avg_total_loss: 0.14037\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.45it/s]\n",
      "2024-10-30 13:31:14,947: Epoch 7 average validation loss: 0.09909 -- Median validation metrics: avg_loss: 0.09909, NSE: 0.77414, MSE: 46842.58203\n",
      "# Epoch 8: 100%|██████████| 23/23 [00:54<00:00,  2.35s/it, Loss: 0.0332]\n",
      "2024-10-30 13:32:09,033: Epoch 8 average loss: avg_loss: 0.13858, avg_total_loss: 0.13858\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.14it/s]\n",
      "2024-10-30 13:32:09,693: Epoch 8 average validation loss: 0.11224 -- Median validation metrics: avg_loss: 0.11224, NSE: 0.74378, MSE: 53138.69922\n",
      "# Epoch 9: 100%|██████████| 23/23 [00:55<00:00,  2.43s/it, Loss: 0.4945]\n",
      "2024-10-30 13:33:05,665: Epoch 9 average loss: avg_loss: 0.13879, avg_total_loss: 0.13879\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.88it/s]\n",
      "2024-10-30 13:33:06,306: Epoch 9 average validation loss: 0.10876 -- Median validation metrics: avg_loss: 0.10876, NSE: 0.75280, MSE: 51269.22656\n",
      "# Epoch 10: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0786]\n",
      "2024-10-30 13:34:01,471: Epoch 10 average loss: avg_loss: 0.12015, avg_total_loss: 0.12015\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 13:34:02,113: Epoch 10 average validation loss: 0.11267 -- Median validation metrics: avg_loss: 0.11267, NSE: 0.74307, MSE: 53286.88672\n",
      "# Epoch 11: 100%|██████████| 23/23 [00:55<00:00,  2.43s/it, Loss: 0.0546]\n",
      "2024-10-30 13:34:57,999: Epoch 11 average loss: avg_loss: 0.12235, avg_total_loss: 0.12235\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.23it/s]\n",
      "2024-10-30 13:34:58,612: Epoch 11 average validation loss: 0.12376 -- Median validation metrics: avg_loss: 0.12376, NSE: 0.71746, MSE: 58598.25000\n",
      "# Epoch 12: 100%|██████████| 23/23 [00:54<00:00,  2.39s/it, Loss: 0.0386]\n",
      "2024-10-30 13:35:53,593: Epoch 12 average loss: avg_loss: 0.10911, avg_total_loss: 0.10911\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.10it/s]\n",
      "2024-10-30 13:35:54,190: Epoch 12 average validation loss: 0.13495 -- Median validation metrics: avg_loss: 0.13495, NSE: 0.69176, MSE: 63928.16016\n",
      "# Epoch 13: 100%|██████████| 23/23 [00:54<00:00,  2.35s/it, Loss: 0.0497]\n",
      "2024-10-30 13:36:48,365: Epoch 13 average loss: avg_loss: 0.10885, avg_total_loss: 0.10885\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.10it/s]\n",
      "2024-10-30 13:36:48,985: Epoch 13 average validation loss: 0.11432 -- Median validation metrics: avg_loss: 0.11432, NSE: 0.73904, MSE: 54121.57812\n",
      "# Epoch 14: 100%|██████████| 23/23 [00:52<00:00,  2.27s/it, Loss: 0.0349]\n",
      "2024-10-30 13:37:41,285: Epoch 14 average loss: avg_loss: 0.09833, avg_total_loss: 0.09833\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.24it/s]\n",
      "2024-10-30 13:37:41,904: Epoch 14 average validation loss: 0.12824 -- Median validation metrics: avg_loss: 0.12824, NSE: 0.70911, MSE: 60329.92188\n",
      "# Epoch 15: 100%|██████████| 23/23 [00:47<00:00,  2.08s/it, Loss: 0.4186]\n",
      "2024-10-30 13:38:29,728: Epoch 15 average loss: avg_loss: 0.10940, avg_total_loss: 0.10940\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.43it/s]\n",
      "2024-10-30 13:38:30,394: Epoch 15 average validation loss: 0.11159 -- Median validation metrics: avg_loss: 0.11159, NSE: 0.74552, MSE: 52777.25391\n",
      "# Epoch 16: 100%|██████████| 23/23 [00:47<00:00,  2.06s/it, Loss: 0.0834]\n",
      "2024-10-30 13:39:17,729: Epoch 16 average loss: avg_loss: 0.09733, avg_total_loss: 0.09733\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.33it/s]\n",
      "2024-10-30 13:39:18,395: Epoch 16 average validation loss: 0.11937 -- Median validation metrics: avg_loss: 0.11937, NSE: 0.72783, MSE: 56447.79688\n",
      "# Epoch 17: 100%|██████████| 23/23 [00:52<00:00,  2.30s/it, Loss: 0.0512]\n",
      "2024-10-30 13:40:11,277: Epoch 17 average loss: avg_loss: 0.09434, avg_total_loss: 0.09434\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  3.95it/s]\n",
      "2024-10-30 13:40:11,978: Epoch 17 average validation loss: 0.11671 -- Median validation metrics: avg_loss: 0.11671, NSE: 0.73466, MSE: 55030.97656\n",
      "# Epoch 18: 100%|██████████| 23/23 [00:47<00:00,  2.07s/it, Loss: 0.0456]\n",
      "2024-10-30 13:40:59,573: Epoch 18 average loss: avg_loss: 0.09998, avg_total_loss: 0.09998\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.58it/s]\n",
      "2024-10-30 13:41:00,216: Epoch 18 average validation loss: 0.10342 -- Median validation metrics: avg_loss: 0.10342, NSE: 0.76415, MSE: 48914.46875\n",
      "# Epoch 19: 100%|██████████| 23/23 [00:48<00:00,  2.11s/it, Loss: 0.0608]\n",
      "2024-10-30 13:41:48,829: Epoch 19 average loss: avg_loss: 0.09449, avg_total_loss: 0.09449\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 13:41:49,456: Epoch 19 average validation loss: 0.12144 -- Median validation metrics: avg_loss: 0.12144, NSE: 0.72349, MSE: 57347.05078\n",
      "# Epoch 20: 100%|██████████| 23/23 [00:51<00:00,  2.26s/it, Loss: 0.3412]\n",
      "2024-10-30 13:42:41,487: Epoch 20 average loss: avg_loss: 0.09446, avg_total_loss: 0.09446\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.57it/s]\n",
      "2024-10-30 13:42:42,136: Epoch 20 average validation loss: 0.10195 -- Median validation metrics: avg_loss: 0.10195, NSE: 0.76734, MSE: 48251.89844\n",
      "# Epoch 21: 100%|██████████| 23/23 [00:51<00:00,  2.25s/it, Loss: 0.1226]\n",
      "2024-10-30 13:43:34,029: Epoch 21 average loss: avg_loss: 0.08728, avg_total_loss: 0.08728\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.93it/s]\n",
      "2024-10-30 13:43:34,769: Epoch 21 average validation loss: 0.10589 -- Median validation metrics: avg_loss: 0.10589, NSE: 0.75829, MSE: 50129.58594\n",
      "# Epoch 22: 100%|██████████| 23/23 [00:51<00:00,  2.25s/it, Loss: 0.0992]\n",
      "2024-10-30 13:44:26,426: Epoch 22 average loss: avg_loss: 0.09703, avg_total_loss: 0.09703\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.50it/s]\n",
      "2024-10-30 13:44:27,050: Epoch 22 average validation loss: 0.09250 -- Median validation metrics: avg_loss: 0.09250, NSE: 0.78988, MSE: 43579.05078\n",
      "# Epoch 23: 100%|██████████| 23/23 [00:51<00:00,  2.25s/it, Loss: 0.4003]\n",
      "2024-10-30 13:45:18,883: Epoch 23 average loss: avg_loss: 0.09465, avg_total_loss: 0.09465\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.77it/s]\n",
      "2024-10-30 13:45:19,572: Epoch 23 average validation loss: 0.11045 -- Median validation metrics: avg_loss: 0.11045, NSE: 0.74782, MSE: 52300.96484\n",
      "# Epoch 24: 100%|██████████| 23/23 [00:51<00:00,  2.25s/it, Loss: 0.1080]\n",
      "2024-10-30 13:46:11,404: Epoch 24 average loss: avg_loss: 0.09062, avg_total_loss: 0.09062\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.58it/s]\n",
      "2024-10-30 13:46:12,019: Epoch 24 average validation loss: 0.11521 -- Median validation metrics: avg_loss: 0.11521, NSE: 0.73709, MSE: 54527.52344\n",
      "# Epoch 25: 100%|██████████| 23/23 [00:50<00:00,  2.19s/it, Loss: 0.0448]\n",
      "2024-10-30 13:47:02,521: Epoch 25 average loss: avg_loss: 0.08495, avg_total_loss: 0.08495\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.84it/s]\n",
      "2024-10-30 13:47:03,151: Epoch 25 average validation loss: 0.10943 -- Median validation metrics: avg_loss: 0.10943, NSE: 0.75042, MSE: 51761.97266\n",
      "# Epoch 26: 100%|██████████| 23/23 [00:51<00:00,  2.22s/it, Loss: 0.0499]\n",
      "2024-10-30 13:47:54,247: Epoch 26 average loss: avg_loss: 0.08502, avg_total_loss: 0.08502\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 13:47:54,906: Epoch 26 average validation loss: 0.10501 -- Median validation metrics: avg_loss: 0.10501, NSE: 0.76073, MSE: 49624.14062\n",
      "# Epoch 27: 100%|██████████| 23/23 [00:51<00:00,  2.23s/it, Loss: 0.0304]\n",
      "2024-10-30 13:48:46,301: Epoch 27 average loss: avg_loss: 0.08281, avg_total_loss: 0.08281\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 13:48:46,982: Epoch 27 average validation loss: 0.09628 -- Median validation metrics: avg_loss: 0.09628, NSE: 0.78040, MSE: 45544.25000\n",
      "# Epoch 28: 100%|██████████| 23/23 [00:51<00:00,  2.23s/it, Loss: 0.1427]\n",
      "2024-10-30 13:49:38,381: Epoch 28 average loss: avg_loss: 0.08038, avg_total_loss: 0.08038\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.23it/s]\n",
      "2024-10-30 13:49:39,011: Epoch 28 average validation loss: 0.10298 -- Median validation metrics: avg_loss: 0.10298, NSE: 0.76531, MSE: 48674.07812\n",
      "# Epoch 29: 100%|██████████| 23/23 [00:51<00:00,  2.24s/it, Loss: 0.0550]\n",
      "2024-10-30 13:50:30,560: Epoch 29 average loss: avg_loss: 0.07318, avg_total_loss: 0.07318\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.15it/s]\n",
      "2024-10-30 13:50:31,279: Epoch 29 average validation loss: 0.10578 -- Median validation metrics: avg_loss: 0.10578, NSE: 0.75863, MSE: 50060.11328\n",
      "# Epoch 30: 100%|██████████| 23/23 [00:51<00:00,  2.23s/it, Loss: 0.0211]\n",
      "2024-10-30 13:51:22,491: Epoch 30 average loss: avg_loss: 0.07650, avg_total_loss: 0.07650\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  7.04it/s]\n",
      "2024-10-30 13:51:23,119: Epoch 30 average validation loss: 0.09728 -- Median validation metrics: avg_loss: 0.09728, NSE: 0.77792, MSE: 46059.21094\n",
      "# Epoch 31: 100%|██████████| 23/23 [00:51<00:00,  2.22s/it, Loss: 0.0418]\n",
      "2024-10-30 13:52:14,281: Epoch 31 average loss: avg_loss: 0.07453, avg_total_loss: 0.07453\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.74it/s]\n",
      "2024-10-30 13:52:14,964: Epoch 31 average validation loss: 0.09954 -- Median validation metrics: avg_loss: 0.09954, NSE: 0.77317, MSE: 47043.36328\n",
      "# Epoch 32: 100%|██████████| 23/23 [00:50<00:00,  2.20s/it, Loss: 0.0323]\n",
      "2024-10-30 13:53:05,512: Epoch 32 average loss: avg_loss: 0.07343, avg_total_loss: 0.07343\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.49it/s]\n",
      "2024-10-30 13:53:06,618: Epoch 32 average validation loss: 0.11556 -- Median validation metrics: avg_loss: 0.11556, NSE: 0.73603, MSE: 54746.94531\n",
      "2024-10-30 13:53:06,657: Logging to F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\output.log initialized.\n",
      "2024-10-30 13:53:06,659: ### Folder structure created at F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\n",
      "2024-10-30 13:53:06,659: ### Run configurations for testing_run\n",
      "2024-10-30 13:53:06,659: experiment_name: testing_run\n",
      "2024-10-30 13:53:06,659: train_basin_file: train_basin_file_template\n",
      "2024-10-30 13:53:06,659: validation_basin_file: train_basin_file_template\n",
      "2024-10-30 13:53:06,659: test_basin_file: train_basin_file_template\n",
      "2024-10-30 13:53:06,667: train_start_date: 1981-10-01 00:00:00\n",
      "2024-10-30 13:53:06,669: train_end_date: 1997-09-30 00:00:00\n",
      "2024-10-30 13:53:06,669: validation_start_date: 1997-10-01 00:00:00\n",
      "2024-10-30 13:53:06,669: validation_end_date: 2000-09-30 00:00:00\n",
      "2024-10-30 13:53:06,669: test_start_date: 2000-10-01 00:00:00\n",
      "2024-10-30 13:53:06,669: test_end_date: 2005-09-30 00:00:00\n",
      "2024-10-30 13:53:06,669: device: cpu\n",
      "2024-10-30 13:53:06,677: physics_informed: True\n",
      "2024-10-30 13:53:06,677: validate_every: 1\n",
      "2024-10-30 13:53:06,679: validate_n_random_basins: 1\n",
      "2024-10-30 13:53:06,679: metrics: ['NSE', 'MSE']\n",
      "2024-10-30 13:53:06,679: model: cudalstm\n",
      "2024-10-30 13:53:06,679: head: regression\n",
      "2024-10-30 13:53:06,679: output_activation: linear\n",
      "2024-10-30 13:53:06,687: hidden_size: 64\n",
      "2024-10-30 13:53:06,689: initial_forget_bias: 3\n",
      "2024-10-30 13:53:06,689: output_dropout: 0.4\n",
      "2024-10-30 13:53:06,689: optimizer: Adam\n",
      "2024-10-30 13:53:06,689: loss: MSE\n",
      "2024-10-30 13:53:06,689: learning_rate: 0.001\n",
      "2024-10-30 13:53:06,689: batch_size: 256\n",
      "2024-10-30 13:53:06,689: epochs: 32\n",
      "2024-10-30 13:53:06,689: clip_gradient_norm: 1\n",
      "2024-10-30 13:53:06,697: predict_last_n: 1\n",
      "2024-10-30 13:53:06,697: seq_length: 90\n",
      "2024-10-30 13:53:06,697: num_workers: 8\n",
      "2024-10-30 13:53:06,700: log_interval: 4\n",
      "2024-10-30 13:53:06,700: log_tensorboard: True\n",
      "2024-10-30 13:53:06,700: log_n_figures: 1\n",
      "2024-10-30 13:53:06,700: save_weights_every: 1\n",
      "2024-10-30 13:53:06,700: dataset: tuler\n",
      "2024-10-30 13:53:06,700: data_dir: F:\\Dino\\UCB-USACE-LSTMs\\data\n",
      "2024-10-30 13:53:06,700: dynamic_inputs: ['MF_TuleR_S10PRECIP-INC', 'MF_TuleR_S10TEMPERATURE-AIR', 'MF_TuleR_S20PRECIP-INC', 'MF_TuleR_S20TEMPERATURE-AIR', 'NF_TuleR_S10PRECIP-INC', 'NF_TuleR_S10TEMPERATURE-AIR', 'SF_TuleR_S10PRECIP-INC', 'SF_TuleR_S10TEMPERATURE-AIR', 'TuleR_S10PRECIP-INC', 'TuleR_S10TEMPERATURE-AIR', 'TuleR_S20PRECIP-INC', 'TuleR_S20TEMPERATURE-AIR']\n",
      "2024-10-30 13:53:06,700: target_variables: ['ReservoirInflowFLOW-OBSERVED']\n",
      "2024-10-30 13:53:06,708: number_of_basins: 1\n",
      "2024-10-30 13:53:06,708: run_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\n",
      "2024-10-30 13:53:06,710: train_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\train_data\n",
      "2024-10-30 13:53:06,710: img_log_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\img_log\n",
      "2024-10-30 13:53:06,710: seed: 462748\n",
      "2024-10-30 13:53:06,710: commit_hash: 61b768d\n",
      "2024-10-30 13:53:06,710: package_version: 1.11.0\n",
      "2024-10-30 13:53:06,710: ### Device cpu will be used for training\n",
      "2024-10-30 13:53:06,718: Loading basin data into xarray data set.\n",
      "100%|██████████| 1/1 [00:00<00:00,  8.21it/s]\n",
      "2024-10-30 13:53:06,852: Create lookup table and convert to pytorch tensor\n",
      "100%|██████████| 1/1 [00:00<00:00, 13.98it/s]\n",
      "# Epoch 1: 100%|██████████| 23/23 [00:51<00:00,  2.25s/it, Loss: 0.1782]\n",
      "2024-10-30 13:53:58,864: Epoch 1 average loss: avg_loss: 0.37874, avg_total_loss: 0.37874\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  2.99it/s]\n",
      "2024-10-30 13:53:59,674: Epoch 1 average validation loss: 0.18850 -- Median validation metrics: avg_loss: 0.18850, NSE: 0.56942, MSE: 89301.39062\n",
      "# Epoch 2: 100%|██████████| 23/23 [00:51<00:00,  2.26s/it, Loss: 0.1655]\n",
      "2024-10-30 13:54:51,670: Epoch 2 average loss: avg_loss: 0.26827, avg_total_loss: 0.26827\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.05it/s]\n",
      "2024-10-30 13:54:52,332: Epoch 2 average validation loss: 0.13681 -- Median validation metrics: avg_loss: 0.13681, NSE: 0.68807, MSE: 64693.03516\n",
      "# Epoch 3: 100%|██████████| 23/23 [00:52<00:00,  2.26s/it, Loss: 0.3405]\n",
      "2024-10-30 13:55:44,428: Epoch 3 average loss: avg_loss: 0.23034, avg_total_loss: 0.23034\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.73it/s]\n",
      "2024-10-30 13:55:45,098: Epoch 3 average validation loss: 0.12590 -- Median validation metrics: avg_loss: 0.12590, NSE: 0.71260, MSE: 59606.28906\n",
      "# Epoch 4: 100%|██████████| 23/23 [00:52<00:00,  2.26s/it, Loss: 0.1098]\n",
      "2024-10-30 13:56:37,131: Epoch 4 average loss: avg_loss: 0.18897, avg_total_loss: 0.18897\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 13:56:37,772: Epoch 4 average validation loss: 0.10828 -- Median validation metrics: avg_loss: 0.10828, NSE: 0.75317, MSE: 51190.92969\n",
      "# Epoch 5: 100%|██████████| 23/23 [00:54<00:00,  2.35s/it, Loss: 0.0930]\n",
      "2024-10-30 13:57:31,811: Epoch 5 average loss: avg_loss: 0.17400, avg_total_loss: 0.17400\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.80it/s]\n",
      "2024-10-30 13:57:32,462: Epoch 5 average validation loss: 0.10066 -- Median validation metrics: avg_loss: 0.10066, NSE: 0.77015, MSE: 47669.55469\n",
      "# Epoch 6: 100%|██████████| 23/23 [00:54<00:00,  2.39s/it, Loss: 0.0627]\n",
      "2024-10-30 13:58:27,377: Epoch 6 average loss: avg_loss: 0.15603, avg_total_loss: 0.15603\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.49it/s]\n",
      "2024-10-30 13:58:27,964: Epoch 6 average validation loss: 0.08439 -- Median validation metrics: avg_loss: 0.08439, NSE: 0.80766, MSE: 39891.31250\n",
      "# Epoch 7: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.0599]\n",
      "2024-10-30 13:59:23,446: Epoch 7 average loss: avg_loss: 0.14037, avg_total_loss: 0.14037\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.81it/s]\n",
      "2024-10-30 13:59:24,107: Epoch 7 average validation loss: 0.09909 -- Median validation metrics: avg_loss: 0.09909, NSE: 0.77414, MSE: 46842.58203\n",
      "# Epoch 8: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0332]\n",
      "2024-10-30 14:00:19,296: Epoch 8 average loss: avg_loss: 0.13858, avg_total_loss: 0.13858\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.79it/s]\n",
      "2024-10-30 14:00:19,916: Epoch 8 average validation loss: 0.11224 -- Median validation metrics: avg_loss: 0.11224, NSE: 0.74378, MSE: 53138.69922\n",
      "# Epoch 9: 100%|██████████| 23/23 [00:52<00:00,  2.30s/it, Loss: 0.4945]\n",
      "2024-10-30 14:01:12,754: Epoch 9 average loss: avg_loss: 0.13879, avg_total_loss: 0.13879\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.80it/s]\n",
      "2024-10-30 14:01:13,452: Epoch 9 average validation loss: 0.10876 -- Median validation metrics: avg_loss: 0.10876, NSE: 0.75280, MSE: 51269.22656\n",
      "# Epoch 10: 100%|██████████| 23/23 [00:55<00:00,  2.43s/it, Loss: 0.0786]\n",
      "2024-10-30 14:02:09,268: Epoch 10 average loss: avg_loss: 0.12015, avg_total_loss: 0.12015\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.57it/s]\n",
      "2024-10-30 14:02:09,878: Epoch 10 average validation loss: 0.11267 -- Median validation metrics: avg_loss: 0.11267, NSE: 0.74307, MSE: 53286.88672\n",
      "# Epoch 11: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.0546]\n",
      "2024-10-30 14:03:05,563: Epoch 11 average loss: avg_loss: 0.12235, avg_total_loss: 0.12235\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.18it/s]\n",
      "2024-10-30 14:03:06,233: Epoch 11 average validation loss: 0.12376 -- Median validation metrics: avg_loss: 0.12376, NSE: 0.71746, MSE: 58598.25000\n",
      "# Epoch 12: 100%|██████████| 23/23 [00:56<00:00,  2.45s/it, Loss: 0.0386]\n",
      "2024-10-30 14:04:02,514: Epoch 12 average loss: avg_loss: 0.10911, avg_total_loss: 0.10911\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.55it/s]\n",
      "2024-10-30 14:04:03,135: Epoch 12 average validation loss: 0.13495 -- Median validation metrics: avg_loss: 0.13495, NSE: 0.69176, MSE: 63928.16016\n",
      "# Epoch 13: 100%|██████████| 23/23 [00:57<00:00,  2.48s/it, Loss: 0.0497]\n",
      "2024-10-30 14:05:00,285: Epoch 13 average loss: avg_loss: 0.10885, avg_total_loss: 0.10885\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.64it/s]\n",
      "2024-10-30 14:05:00,936: Epoch 13 average validation loss: 0.11432 -- Median validation metrics: avg_loss: 0.11432, NSE: 0.73904, MSE: 54121.57812\n",
      "# Epoch 14: 100%|██████████| 23/23 [00:54<00:00,  2.37s/it, Loss: 0.0349]\n",
      "2024-10-30 14:05:55,377: Epoch 14 average loss: avg_loss: 0.09833, avg_total_loss: 0.09833\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.79it/s]\n",
      "2024-10-30 14:05:56,019: Epoch 14 average validation loss: 0.12824 -- Median validation metrics: avg_loss: 0.12824, NSE: 0.70911, MSE: 60329.92188\n",
      "# Epoch 15: 100%|██████████| 23/23 [00:53<00:00,  2.33s/it, Loss: 0.4186]\n",
      "2024-10-30 14:06:49,610: Epoch 15 average loss: avg_loss: 0.10940, avg_total_loss: 0.10940\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.25it/s]\n",
      "2024-10-30 14:06:50,249: Epoch 15 average validation loss: 0.11159 -- Median validation metrics: avg_loss: 0.11159, NSE: 0.74552, MSE: 52777.25391\n",
      "# Epoch 16: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.0834]\n",
      "2024-10-30 14:07:46,328: Epoch 16 average loss: avg_loss: 0.09733, avg_total_loss: 0.09733\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.87it/s]\n",
      "2024-10-30 14:07:47,019: Epoch 16 average validation loss: 0.11937 -- Median validation metrics: avg_loss: 0.11937, NSE: 0.72783, MSE: 56447.79688\n",
      "# Epoch 17: 100%|██████████| 23/23 [00:55<00:00,  2.39s/it, Loss: 0.0512]\n",
      "2024-10-30 14:08:42,048: Epoch 17 average loss: avg_loss: 0.09434, avg_total_loss: 0.09434\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.48it/s]\n",
      "2024-10-30 14:08:42,710: Epoch 17 average validation loss: 0.11671 -- Median validation metrics: avg_loss: 0.11671, NSE: 0.73466, MSE: 55030.97656\n",
      "# Epoch 18: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.0456]\n",
      "2024-10-30 14:09:38,930: Epoch 18 average loss: avg_loss: 0.09998, avg_total_loss: 0.09998\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.50it/s]\n",
      "2024-10-30 14:09:39,529: Epoch 18 average validation loss: 0.10342 -- Median validation metrics: avg_loss: 0.10342, NSE: 0.76415, MSE: 48914.46875\n",
      "# Epoch 19: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.0608]\n",
      "2024-10-30 14:10:35,764: Epoch 19 average loss: avg_loss: 0.09449, avg_total_loss: 0.09449\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.74it/s]\n",
      "2024-10-30 14:10:36,395: Epoch 19 average validation loss: 0.12144 -- Median validation metrics: avg_loss: 0.12144, NSE: 0.72349, MSE: 57347.05078\n",
      "# Epoch 20: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.3412]\n",
      "2024-10-30 14:11:31,873: Epoch 20 average loss: avg_loss: 0.09446, avg_total_loss: 0.09446\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.80it/s]\n",
      "2024-10-30 14:11:32,465: Epoch 20 average validation loss: 0.10195 -- Median validation metrics: avg_loss: 0.10195, NSE: 0.76734, MSE: 48251.89844\n",
      "# Epoch 21: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.1226]\n",
      "2024-10-30 14:12:27,810: Epoch 21 average loss: avg_loss: 0.08728, avg_total_loss: 0.08728\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.48it/s]\n",
      "2024-10-30 14:12:28,460: Epoch 21 average validation loss: 0.10589 -- Median validation metrics: avg_loss: 0.10589, NSE: 0.75829, MSE: 50129.58594\n",
      "# Epoch 22: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.0992]\n",
      "2024-10-30 14:13:24,244: Epoch 22 average loss: avg_loss: 0.09703, avg_total_loss: 0.09703\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.42it/s]\n",
      "2024-10-30 14:13:24,937: Epoch 22 average validation loss: 0.09250 -- Median validation metrics: avg_loss: 0.09250, NSE: 0.78988, MSE: 43579.05078\n",
      "# Epoch 23: 100%|██████████| 23/23 [00:54<00:00,  2.39s/it, Loss: 0.4003]\n",
      "2024-10-30 14:14:19,886: Epoch 23 average loss: avg_loss: 0.09465, avg_total_loss: 0.09465\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.25it/s]\n",
      "2024-10-30 14:14:20,542: Epoch 23 average validation loss: 0.11045 -- Median validation metrics: avg_loss: 0.11045, NSE: 0.74782, MSE: 52300.96484\n",
      "# Epoch 24: 100%|██████████| 23/23 [00:54<00:00,  2.36s/it, Loss: 0.1080]\n",
      "2024-10-30 14:15:14,926: Epoch 24 average loss: avg_loss: 0.09062, avg_total_loss: 0.09062\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 14:15:15,544: Epoch 24 average validation loss: 0.11521 -- Median validation metrics: avg_loss: 0.11521, NSE: 0.73709, MSE: 54527.52344\n",
      "# Epoch 25: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0448]\n",
      "2024-10-30 14:16:10,830: Epoch 25 average loss: avg_loss: 0.08495, avg_total_loss: 0.08495\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.73it/s]\n",
      "2024-10-30 14:16:11,467: Epoch 25 average validation loss: 0.10943 -- Median validation metrics: avg_loss: 0.10943, NSE: 0.75042, MSE: 51761.97266\n",
      "# Epoch 26: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.0499]\n",
      "2024-10-30 14:17:06,973: Epoch 26 average loss: avg_loss: 0.08502, avg_total_loss: 0.08502\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.88it/s]\n",
      "2024-10-30 14:17:07,603: Epoch 26 average validation loss: 0.10501 -- Median validation metrics: avg_loss: 0.10501, NSE: 0.76073, MSE: 49624.14062\n",
      "# Epoch 27: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0304]\n",
      "2024-10-30 14:18:02,877: Epoch 27 average loss: avg_loss: 0.08281, avg_total_loss: 0.08281\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.25it/s]\n",
      "2024-10-30 14:18:03,537: Epoch 27 average validation loss: 0.09628 -- Median validation metrics: avg_loss: 0.09628, NSE: 0.78040, MSE: 45544.25000\n",
      "# Epoch 28: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.1427]\n",
      "2024-10-30 14:18:59,650: Epoch 28 average loss: avg_loss: 0.08038, avg_total_loss: 0.08038\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.54it/s]\n",
      "2024-10-30 14:19:00,300: Epoch 28 average validation loss: 0.10298 -- Median validation metrics: avg_loss: 0.10298, NSE: 0.76531, MSE: 48674.07812\n",
      "# Epoch 29: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.0550]\n",
      "2024-10-30 14:19:56,486: Epoch 29 average loss: avg_loss: 0.07318, avg_total_loss: 0.07318\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.92it/s]\n",
      "2024-10-30 14:19:57,178: Epoch 29 average validation loss: 0.10578 -- Median validation metrics: avg_loss: 0.10578, NSE: 0.75863, MSE: 50060.11328\n",
      "# Epoch 30: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.0211]\n",
      "2024-10-30 14:20:53,286: Epoch 30 average loss: avg_loss: 0.07650, avg_total_loss: 0.07650\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 14:20:53,917: Epoch 30 average validation loss: 0.09728 -- Median validation metrics: avg_loss: 0.09728, NSE: 0.77792, MSE: 46059.21094\n",
      "# Epoch 31: 100%|██████████| 23/23 [00:54<00:00,  2.36s/it, Loss: 0.0418]\n",
      "2024-10-30 14:21:48,216: Epoch 31 average loss: avg_loss: 0.07453, avg_total_loss: 0.07453\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 14:21:49,155: Epoch 31 average validation loss: 0.09954 -- Median validation metrics: avg_loss: 0.09954, NSE: 0.77317, MSE: 47043.36328\n",
      "# Epoch 32: 100%|██████████| 23/23 [00:56<00:00,  2.47s/it, Loss: 0.0323]\n",
      "2024-10-30 14:22:46,117: Epoch 32 average loss: avg_loss: 0.07343, avg_total_loss: 0.07343\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.10it/s]\n",
      "2024-10-30 14:22:46,737: Epoch 32 average validation loss: 0.11556 -- Median validation metrics: avg_loss: 0.11556, NSE: 0.73603, MSE: 54746.94531\n",
      "2024-10-30 14:22:46,798: Logging to F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\output.log initialized.\n",
      "2024-10-30 14:22:46,806: ### Folder structure created at F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\n",
      "2024-10-30 14:22:46,808: ### Run configurations for testing_run\n",
      "2024-10-30 14:22:46,808: experiment_name: testing_run\n",
      "2024-10-30 14:22:46,808: train_basin_file: train_basin_file_template\n",
      "2024-10-30 14:22:46,808: validation_basin_file: train_basin_file_template\n",
      "2024-10-30 14:22:46,819: test_basin_file: train_basin_file_template\n",
      "2024-10-30 14:22:46,819: train_start_date: 1981-10-01 00:00:00\n",
      "2024-10-30 14:22:46,819: train_end_date: 1997-09-30 00:00:00\n",
      "2024-10-30 14:22:46,819: validation_start_date: 1997-10-01 00:00:00\n",
      "2024-10-30 14:22:46,819: validation_end_date: 2000-09-30 00:00:00\n",
      "2024-10-30 14:22:46,827: test_start_date: 2000-10-01 00:00:00\n",
      "2024-10-30 14:22:46,829: test_end_date: 2005-09-30 00:00:00\n",
      "2024-10-30 14:22:46,829: device: cpu\n",
      "2024-10-30 14:22:46,829: physics_informed: True\n",
      "2024-10-30 14:22:46,829: validate_every: 1\n",
      "2024-10-30 14:22:46,837: validate_n_random_basins: 1\n",
      "2024-10-30 14:22:46,839: metrics: ['NSE', 'MSE']\n",
      "2024-10-30 14:22:46,839: model: cudalstm\n",
      "2024-10-30 14:22:46,839: head: regression\n",
      "2024-10-30 14:22:46,839: output_activation: linear\n",
      "2024-10-30 14:22:46,839: hidden_size: 64\n",
      "2024-10-30 14:22:46,839: initial_forget_bias: 3\n",
      "2024-10-30 14:22:46,847: output_dropout: 0.4\n",
      "2024-10-30 14:22:46,847: optimizer: Adam\n",
      "2024-10-30 14:22:46,849: loss: MSE\n",
      "2024-10-30 14:22:46,849: learning_rate: 0.001\n",
      "2024-10-30 14:22:46,849: batch_size: 256\n",
      "2024-10-30 14:22:46,849: epochs: 32\n",
      "2024-10-30 14:22:46,849: clip_gradient_norm: 1\n",
      "2024-10-30 14:22:46,849: predict_last_n: 1\n",
      "2024-10-30 14:22:46,857: seq_length: 90\n",
      "2024-10-30 14:22:46,857: num_workers: 8\n",
      "2024-10-30 14:22:46,860: log_interval: 4\n",
      "2024-10-30 14:22:46,860: log_tensorboard: True\n",
      "2024-10-30 14:22:46,860: log_n_figures: 1\n",
      "2024-10-30 14:22:46,860: save_weights_every: 1\n",
      "2024-10-30 14:22:46,860: dataset: tuler\n",
      "2024-10-30 14:22:46,860: data_dir: F:\\Dino\\UCB-USACE-LSTMs\\data\n",
      "2024-10-30 14:22:46,860: dynamic_inputs: ['MF_TuleR_S10PRECIP-INC', 'MF_TuleR_S10TEMPERATURE-AIR', 'MF_TuleR_S20PRECIP-INC', 'MF_TuleR_S20TEMPERATURE-AIR', 'NF_TuleR_S10PRECIP-INC', 'NF_TuleR_S10TEMPERATURE-AIR', 'SF_TuleR_S10PRECIP-INC', 'SF_TuleR_S10TEMPERATURE-AIR', 'TuleR_S10PRECIP-INC', 'TuleR_S10TEMPERATURE-AIR', 'TuleR_S20PRECIP-INC', 'TuleR_S20TEMPERATURE-AIR']\n",
      "2024-10-30 14:22:46,860: target_variables: ['ReservoirInflowFLOW-OBSERVED']\n",
      "2024-10-30 14:22:46,860: number_of_basins: 1\n",
      "2024-10-30 14:22:46,868: run_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\n",
      "2024-10-30 14:22:46,868: train_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\train_data\n",
      "2024-10-30 14:22:46,870: img_log_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\img_log\n",
      "2024-10-30 14:22:46,870: seed: 462748\n",
      "2024-10-30 14:22:46,870: commit_hash: 61b768d\n",
      "2024-10-30 14:22:46,870: package_version: 1.11.0\n",
      "2024-10-30 14:22:46,870: ### Device cpu will be used for training\n",
      "2024-10-30 14:22:46,878: Loading basin data into xarray data set.\n",
      "100%|██████████| 1/1 [00:00<00:00,  8.25it/s]\n",
      "2024-10-30 14:22:47,032: Create lookup table and convert to pytorch tensor\n",
      "100%|██████████| 1/1 [00:00<00:00, 12.25it/s]\n",
      "# Epoch 1: 100%|██████████| 23/23 [00:56<00:00,  2.45s/it, Loss: 0.1782]\n",
      "2024-10-30 14:23:43,689: Epoch 1 average loss: avg_loss: 0.37874, avg_total_loss: 0.37874\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  2.89it/s]\n",
      "2024-10-30 14:23:44,533: Epoch 1 average validation loss: 0.18850 -- Median validation metrics: avg_loss: 0.18850, NSE: 0.56942, MSE: 89301.39062\n",
      "# Epoch 2: 100%|██████████| 23/23 [00:54<00:00,  2.35s/it, Loss: 0.1655]\n",
      "2024-10-30 14:24:38,610: Epoch 2 average loss: avg_loss: 0.26827, avg_total_loss: 0.26827\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 14:24:39,191: Epoch 2 average validation loss: 0.13681 -- Median validation metrics: avg_loss: 0.13681, NSE: 0.68807, MSE: 64693.03516\n",
      "# Epoch 3: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.3405]\n",
      "2024-10-30 14:25:34,665: Epoch 3 average loss: avg_loss: 0.23034, avg_total_loss: 0.23034\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.58it/s]\n",
      "2024-10-30 14:25:35,284: Epoch 3 average validation loss: 0.12590 -- Median validation metrics: avg_loss: 0.12590, NSE: 0.71260, MSE: 59606.28906\n",
      "# Epoch 4: 100%|██████████| 23/23 [00:53<00:00,  2.33s/it, Loss: 0.1098]\n",
      "2024-10-30 14:26:28,873: Epoch 4 average loss: avg_loss: 0.18897, avg_total_loss: 0.18897\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.94it/s]\n",
      "2024-10-30 14:26:29,524: Epoch 4 average validation loss: 0.10828 -- Median validation metrics: avg_loss: 0.10828, NSE: 0.75317, MSE: 51190.92969\n",
      "# Epoch 5: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.0930]\n",
      "2024-10-30 14:27:24,267: Epoch 5 average loss: avg_loss: 0.17400, avg_total_loss: 0.17400\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.68it/s]\n",
      "2024-10-30 14:27:24,944: Epoch 5 average validation loss: 0.10066 -- Median validation metrics: avg_loss: 0.10066, NSE: 0.77015, MSE: 47669.55469\n",
      "# Epoch 6: 100%|██████████| 23/23 [00:54<00:00,  2.37s/it, Loss: 0.0627]\n",
      "2024-10-30 14:28:19,574: Epoch 6 average loss: avg_loss: 0.15603, avg_total_loss: 0.15603\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.48it/s]\n",
      "2024-10-30 14:28:20,235: Epoch 6 average validation loss: 0.08439 -- Median validation metrics: avg_loss: 0.08439, NSE: 0.80766, MSE: 39891.31250\n",
      "# Epoch 7: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.0599]\n",
      "2024-10-30 14:29:15,851: Epoch 7 average loss: avg_loss: 0.14037, avg_total_loss: 0.14037\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.80it/s]\n",
      "2024-10-30 14:29:16,517: Epoch 7 average validation loss: 0.09909 -- Median validation metrics: avg_loss: 0.09909, NSE: 0.77414, MSE: 46842.58203\n",
      "# Epoch 8: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.0332]\n",
      "2024-10-30 14:30:11,346: Epoch 8 average loss: avg_loss: 0.13858, avg_total_loss: 0.13858\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.10it/s]\n",
      "2024-10-30 14:30:11,935: Epoch 8 average validation loss: 0.11224 -- Median validation metrics: avg_loss: 0.11224, NSE: 0.74378, MSE: 53138.69922\n",
      "# Epoch 9: 100%|██████████| 23/23 [00:54<00:00,  2.35s/it, Loss: 0.4945]\n",
      "2024-10-30 14:31:06,100: Epoch 9 average loss: avg_loss: 0.13879, avg_total_loss: 0.13879\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 14:31:06,746: Epoch 9 average validation loss: 0.10876 -- Median validation metrics: avg_loss: 0.10876, NSE: 0.75280, MSE: 51269.22656\n",
      "# Epoch 10: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.0786]\n",
      "2024-10-30 14:32:01,492: Epoch 10 average loss: avg_loss: 0.12015, avg_total_loss: 0.12015\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.47it/s]\n",
      "2024-10-30 14:32:02,131: Epoch 10 average validation loss: 0.11267 -- Median validation metrics: avg_loss: 0.11267, NSE: 0.74307, MSE: 53286.88672\n",
      "# Epoch 11: 100%|██████████| 23/23 [00:56<00:00,  2.47s/it, Loss: 0.0546]\n",
      "2024-10-30 14:32:59,050: Epoch 11 average loss: avg_loss: 0.12235, avg_total_loss: 0.12235\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.20it/s]\n",
      "2024-10-30 14:32:59,742: Epoch 11 average validation loss: 0.12376 -- Median validation metrics: avg_loss: 0.12376, NSE: 0.71746, MSE: 58598.25000\n",
      "# Epoch 12: 100%|██████████| 23/23 [00:57<00:00,  2.48s/it, Loss: 0.0386]\n",
      "2024-10-30 14:33:56,791: Epoch 12 average loss: avg_loss: 0.10911, avg_total_loss: 0.10911\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.25it/s]\n",
      "2024-10-30 14:33:57,422: Epoch 12 average validation loss: 0.13495 -- Median validation metrics: avg_loss: 0.13495, NSE: 0.69176, MSE: 63928.16016\n",
      "# Epoch 13: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0497]\n",
      "2024-10-30 14:34:52,769: Epoch 13 average loss: avg_loss: 0.10885, avg_total_loss: 0.10885\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 14:34:53,367: Epoch 13 average validation loss: 0.11432 -- Median validation metrics: avg_loss: 0.11432, NSE: 0.73904, MSE: 54121.57812\n",
      "# Epoch 14: 100%|██████████| 23/23 [00:54<00:00,  2.39s/it, Loss: 0.0349]\n",
      "2024-10-30 14:35:48,382: Epoch 14 average loss: avg_loss: 0.09833, avg_total_loss: 0.09833\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.15it/s]\n",
      "2024-10-30 14:35:49,025: Epoch 14 average validation loss: 0.12824 -- Median validation metrics: avg_loss: 0.12824, NSE: 0.70911, MSE: 60329.92188\n",
      "# Epoch 15: 100%|██████████| 23/23 [00:54<00:00,  2.37s/it, Loss: 0.4186]\n",
      "2024-10-30 14:36:43,642: Epoch 15 average loss: avg_loss: 0.10940, avg_total_loss: 0.10940\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.86it/s]\n",
      "2024-10-30 14:36:44,306: Epoch 15 average validation loss: 0.11159 -- Median validation metrics: avg_loss: 0.11159, NSE: 0.74552, MSE: 52777.25391\n",
      "# Epoch 16: 100%|██████████| 23/23 [00:55<00:00,  2.39s/it, Loss: 0.0834]\n",
      "2024-10-30 14:37:39,355: Epoch 16 average loss: avg_loss: 0.09733, avg_total_loss: 0.09733\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.20it/s]\n",
      "2024-10-30 14:37:40,059: Epoch 16 average validation loss: 0.11937 -- Median validation metrics: avg_loss: 0.11937, NSE: 0.72783, MSE: 56447.79688\n",
      "# Epoch 17: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.0512]\n",
      "2024-10-30 14:38:36,146: Epoch 17 average loss: avg_loss: 0.09434, avg_total_loss: 0.09434\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.49it/s]\n",
      "2024-10-30 14:38:36,756: Epoch 17 average validation loss: 0.11671 -- Median validation metrics: avg_loss: 0.11671, NSE: 0.73466, MSE: 55030.97656\n",
      "# Epoch 18: 100%|██████████| 23/23 [00:56<00:00,  2.45s/it, Loss: 0.0456]\n",
      "2024-10-30 14:39:33,067: Epoch 18 average loss: avg_loss: 0.09998, avg_total_loss: 0.09998\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.42it/s]\n",
      "2024-10-30 14:39:33,680: Epoch 18 average validation loss: 0.10342 -- Median validation metrics: avg_loss: 0.10342, NSE: 0.76415, MSE: 48914.46875\n",
      "# Epoch 19: 100%|██████████| 23/23 [00:53<00:00,  2.34s/it, Loss: 0.0608]\n",
      "2024-10-30 14:40:27,456: Epoch 19 average loss: avg_loss: 0.09449, avg_total_loss: 0.09449\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  7.05it/s]\n",
      "2024-10-30 14:40:28,066: Epoch 19 average validation loss: 0.12144 -- Median validation metrics: avg_loss: 0.12144, NSE: 0.72349, MSE: 57347.05078\n",
      "# Epoch 20: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.3412]\n",
      "2024-10-30 14:41:23,594: Epoch 20 average loss: avg_loss: 0.09446, avg_total_loss: 0.09446\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  7.05it/s]\n",
      "2024-10-30 14:41:24,245: Epoch 20 average validation loss: 0.10195 -- Median validation metrics: avg_loss: 0.10195, NSE: 0.76734, MSE: 48251.89844\n",
      "# Epoch 21: 100%|██████████| 23/23 [00:53<00:00,  2.34s/it, Loss: 0.1226]\n",
      "2024-10-30 14:42:18,174: Epoch 21 average loss: avg_loss: 0.08728, avg_total_loss: 0.08728\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.80it/s]\n",
      "2024-10-30 14:42:18,803: Epoch 21 average validation loss: 0.10589 -- Median validation metrics: avg_loss: 0.10589, NSE: 0.75829, MSE: 50129.58594\n",
      "# Epoch 22: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.0992]\n",
      "2024-10-30 14:43:13,622: Epoch 22 average loss: avg_loss: 0.09703, avg_total_loss: 0.09703\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.94it/s]\n",
      "2024-10-30 14:43:14,275: Epoch 22 average validation loss: 0.09250 -- Median validation metrics: avg_loss: 0.09250, NSE: 0.78988, MSE: 43579.05078\n",
      "# Epoch 23: 100%|██████████| 23/23 [00:53<00:00,  2.32s/it, Loss: 0.4003]\n",
      "2024-10-30 14:44:07,587: Epoch 23 average loss: avg_loss: 0.09465, avg_total_loss: 0.09465\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.06it/s]\n",
      "2024-10-30 14:44:08,249: Epoch 23 average validation loss: 0.11045 -- Median validation metrics: avg_loss: 0.11045, NSE: 0.74782, MSE: 52300.96484\n",
      "# Epoch 24: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.1080]\n",
      "2024-10-30 14:45:03,986: Epoch 24 average loss: avg_loss: 0.09062, avg_total_loss: 0.09062\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 14:45:04,586: Epoch 24 average validation loss: 0.11521 -- Median validation metrics: avg_loss: 0.11521, NSE: 0.73709, MSE: 54527.52344\n",
      "# Epoch 25: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.0448]\n",
      "2024-10-30 14:45:59,392: Epoch 25 average loss: avg_loss: 0.08495, avg_total_loss: 0.08495\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.49it/s]\n",
      "2024-10-30 14:46:00,095: Epoch 25 average validation loss: 0.10943 -- Median validation metrics: avg_loss: 0.10943, NSE: 0.75042, MSE: 51761.97266\n",
      "# Epoch 26: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.0499]\n",
      "2024-10-30 14:46:55,774: Epoch 26 average loss: avg_loss: 0.08502, avg_total_loss: 0.08502\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 14:46:56,373: Epoch 26 average validation loss: 0.10501 -- Median validation metrics: avg_loss: 0.10501, NSE: 0.76073, MSE: 49624.14062\n",
      "# Epoch 27: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.0304]\n",
      "2024-10-30 14:47:51,202: Epoch 27 average loss: avg_loss: 0.08281, avg_total_loss: 0.08281\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.58it/s]\n",
      "2024-10-30 14:47:51,860: Epoch 27 average validation loss: 0.09628 -- Median validation metrics: avg_loss: 0.09628, NSE: 0.78040, MSE: 45544.25000\n",
      "# Epoch 28: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.1427]\n",
      "2024-10-30 14:48:46,585: Epoch 28 average loss: avg_loss: 0.08038, avg_total_loss: 0.08038\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.19it/s]\n",
      "2024-10-30 14:48:47,468: Epoch 28 average validation loss: 0.10298 -- Median validation metrics: avg_loss: 0.10298, NSE: 0.76531, MSE: 48674.07812\n",
      "# Epoch 29: 100%|██████████| 23/23 [00:54<00:00,  2.36s/it, Loss: 0.0550]\n",
      "2024-10-30 14:49:41,815: Epoch 29 average loss: avg_loss: 0.07318, avg_total_loss: 0.07318\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.81it/s]\n",
      "2024-10-30 14:49:42,499: Epoch 29 average validation loss: 0.10578 -- Median validation metrics: avg_loss: 0.10578, NSE: 0.75863, MSE: 50060.11328\n",
      "# Epoch 30: 100%|██████████| 23/23 [00:56<00:00,  2.45s/it, Loss: 0.0211]\n",
      "2024-10-30 14:50:38,878: Epoch 30 average loss: avg_loss: 0.07650, avg_total_loss: 0.07650\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.48it/s]\n",
      "2024-10-30 14:50:39,546: Epoch 30 average validation loss: 0.09728 -- Median validation metrics: avg_loss: 0.09728, NSE: 0.77792, MSE: 46059.21094\n",
      "# Epoch 31: 100%|██████████| 23/23 [00:53<00:00,  2.35s/it, Loss: 0.0418]\n",
      "2024-10-30 14:51:33,571: Epoch 31 average loss: avg_loss: 0.07453, avg_total_loss: 0.07453\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.29it/s]\n",
      "2024-10-30 14:51:34,233: Epoch 31 average validation loss: 0.09954 -- Median validation metrics: avg_loss: 0.09954, NSE: 0.77317, MSE: 47043.36328\n",
      "# Epoch 32: 100%|██████████| 23/23 [00:54<00:00,  2.39s/it, Loss: 0.0323]\n",
      "2024-10-30 14:52:29,146: Epoch 32 average loss: avg_loss: 0.07343, avg_total_loss: 0.07343\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.57it/s]\n",
      "2024-10-30 14:52:29,746: Epoch 32 average validation loss: 0.11556 -- Median validation metrics: avg_loss: 0.11556, NSE: 0.73603, MSE: 54746.94531\n",
      "2024-10-30 14:52:29,756: Logging to F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\\output.log initialized.\n",
      "2024-10-30 14:52:29,764: ### Folder structure created at F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\n",
      "2024-10-30 14:52:29,766: ### Run configurations for testing_run\n",
      "2024-10-30 14:52:29,766: experiment_name: testing_run\n",
      "2024-10-30 14:52:29,766: train_basin_file: train_basin_file_template\n",
      "2024-10-30 14:52:29,766: validation_basin_file: train_basin_file_template\n",
      "2024-10-30 14:52:29,766: test_basin_file: train_basin_file_template\n",
      "2024-10-30 14:52:29,774: train_start_date: 1981-10-01 00:00:00\n",
      "2024-10-30 14:52:29,776: train_end_date: 1997-09-30 00:00:00\n",
      "2024-10-30 14:52:29,776: validation_start_date: 1997-10-01 00:00:00\n",
      "2024-10-30 14:52:29,776: validation_end_date: 2000-09-30 00:00:00\n",
      "2024-10-30 14:52:29,776: test_start_date: 2000-10-01 00:00:00\n",
      "2024-10-30 14:52:29,776: test_end_date: 2005-09-30 00:00:00\n",
      "2024-10-30 14:52:29,776: device: cpu\n",
      "2024-10-30 14:52:29,784: physics_informed: True\n",
      "2024-10-30 14:52:29,784: validate_every: 1\n",
      "2024-10-30 14:52:29,786: validate_n_random_basins: 1\n",
      "2024-10-30 14:52:29,786: metrics: ['NSE', 'MSE']\n",
      "2024-10-30 14:52:29,786: model: cudalstm\n",
      "2024-10-30 14:52:29,786: head: regression\n",
      "2024-10-30 14:52:29,786: output_activation: linear\n",
      "2024-10-30 14:52:29,786: hidden_size: 64\n",
      "2024-10-30 14:52:29,786: initial_forget_bias: 3\n",
      "2024-10-30 14:52:29,786: output_dropout: 0.4\n",
      "2024-10-30 14:52:29,794: optimizer: Adam\n",
      "2024-10-30 14:52:29,794: loss: MSE\n",
      "2024-10-30 14:52:29,796: learning_rate: 0.001\n",
      "2024-10-30 14:52:29,796: batch_size: 256\n",
      "2024-10-30 14:52:29,796: epochs: 32\n",
      "2024-10-30 14:52:29,796: clip_gradient_norm: 1\n",
      "2024-10-30 14:52:29,796: predict_last_n: 1\n",
      "2024-10-30 14:52:29,796: seq_length: 90\n",
      "2024-10-30 14:52:29,804: num_workers: 8\n",
      "2024-10-30 14:52:29,806: log_interval: 4\n",
      "2024-10-30 14:52:29,806: log_tensorboard: True\n",
      "2024-10-30 14:52:29,806: log_n_figures: 1\n",
      "2024-10-30 14:52:29,806: save_weights_every: 1\n",
      "2024-10-30 14:52:29,806: dataset: tuler\n",
      "2024-10-30 14:52:29,806: data_dir: F:\\Dino\\UCB-USACE-LSTMs\\data\n",
      "2024-10-30 14:52:29,814: dynamic_inputs: ['MF_TuleR_S10PRECIP-INC', 'MF_TuleR_S10TEMPERATURE-AIR', 'MF_TuleR_S20PRECIP-INC', 'MF_TuleR_S20TEMPERATURE-AIR', 'NF_TuleR_S10PRECIP-INC', 'NF_TuleR_S10TEMPERATURE-AIR', 'SF_TuleR_S10PRECIP-INC', 'SF_TuleR_S10TEMPERATURE-AIR', 'TuleR_S10PRECIP-INC', 'TuleR_S10TEMPERATURE-AIR', 'TuleR_S20PRECIP-INC', 'TuleR_S20TEMPERATURE-AIR']\n",
      "2024-10-30 14:52:29,814: target_variables: ['ReservoirInflowFLOW-OBSERVED']\n",
      "2024-10-30 14:52:29,816: number_of_basins: 1\n",
      "2024-10-30 14:52:29,816: run_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\n",
      "2024-10-30 14:52:29,816: train_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\\train_data\n",
      "2024-10-30 14:52:29,816: img_log_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\\img_log\n",
      "2024-10-30 14:52:29,816: seed: 462748\n",
      "2024-10-30 14:52:29,816: commit_hash: 61b768d\n",
      "2024-10-30 14:52:29,816: package_version: 1.11.0\n",
      "2024-10-30 14:52:29,826: ### Device cpu will be used for training\n",
      "2024-10-30 14:52:29,826: Loading basin data into xarray data set.\n",
      "100%|██████████| 1/1 [00:00<00:00,  8.27it/s]\n",
      "2024-10-30 14:52:29,978: Create lookup table and convert to pytorch tensor\n",
      "100%|██████████| 1/1 [00:00<00:00, 14.04it/s]\n",
      "# Epoch 1: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.1782]\n",
      "2024-10-30 14:53:25,763: Epoch 1 average loss: avg_loss: 0.37874, avg_total_loss: 0.37874\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "2024-10-30 14:53:26,568: Epoch 1 average validation loss: 0.18850 -- Median validation metrics: avg_loss: 0.18850, NSE: 0.56942, MSE: 89301.39062\n",
      "# Epoch 2: 100%|██████████| 23/23 [00:55<00:00,  2.39s/it, Loss: 0.1655]\n",
      "2024-10-30 14:54:21,663: Epoch 2 average loss: avg_loss: 0.26827, avg_total_loss: 0.26827\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.47it/s]\n",
      "2024-10-30 14:54:22,285: Epoch 2 average validation loss: 0.13681 -- Median validation metrics: avg_loss: 0.13681, NSE: 0.68807, MSE: 64693.03516\n",
      "# Epoch 3: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.3405]\n",
      "2024-10-30 14:55:17,772: Epoch 3 average loss: avg_loss: 0.23034, avg_total_loss: 0.23034\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.29it/s]\n",
      "2024-10-30 14:55:18,461: Epoch 3 average validation loss: 0.12590 -- Median validation metrics: avg_loss: 0.12590, NSE: 0.71260, MSE: 59606.28906\n",
      "# Epoch 4: 100%|██████████| 23/23 [00:54<00:00,  2.39s/it, Loss: 0.1098]\n",
      "2024-10-30 14:56:13,435: Epoch 4 average loss: avg_loss: 0.18897, avg_total_loss: 0.18897\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.15it/s]\n",
      "2024-10-30 14:56:14,072: Epoch 4 average validation loss: 0.10828 -- Median validation metrics: avg_loss: 0.10828, NSE: 0.75317, MSE: 51190.92969\n",
      "# Epoch 5: 100%|██████████| 23/23 [00:54<00:00,  2.39s/it, Loss: 0.0930]\n",
      "2024-10-30 14:57:09,076: Epoch 5 average loss: avg_loss: 0.17400, avg_total_loss: 0.17400\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.88it/s]\n",
      "2024-10-30 14:57:09,676: Epoch 5 average validation loss: 0.10066 -- Median validation metrics: avg_loss: 0.10066, NSE: 0.77015, MSE: 47669.55469\n",
      "# Epoch 6: 100%|██████████| 23/23 [00:55<00:00,  2.39s/it, Loss: 0.0627]\n",
      "2024-10-30 14:58:04,731: Epoch 6 average loss: avg_loss: 0.15603, avg_total_loss: 0.15603\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.80it/s]\n",
      "2024-10-30 14:58:05,443: Epoch 6 average validation loss: 0.08439 -- Median validation metrics: avg_loss: 0.08439, NSE: 0.80766, MSE: 39891.31250\n",
      "# Epoch 7: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.0599]\n",
      "2024-10-30 14:59:00,150: Epoch 7 average loss: avg_loss: 0.14037, avg_total_loss: 0.14037\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.25it/s]\n",
      "2024-10-30 14:59:00,738: Epoch 7 average validation loss: 0.09909 -- Median validation metrics: avg_loss: 0.09909, NSE: 0.77414, MSE: 46842.58203\n",
      "# Epoch 8: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.0332]\n",
      "2024-10-30 14:59:56,174: Epoch 8 average loss: avg_loss: 0.13858, avg_total_loss: 0.13858\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.70it/s]\n",
      "2024-10-30 14:59:56,884: Epoch 8 average validation loss: 0.11224 -- Median validation metrics: avg_loss: 0.11224, NSE: 0.74378, MSE: 53138.69922\n",
      "# Epoch 9: 100%|██████████| 23/23 [00:54<00:00,  2.36s/it, Loss: 0.4945]\n",
      "2024-10-30 15:00:51,190: Epoch 9 average loss: avg_loss: 0.13879, avg_total_loss: 0.13879\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.88it/s]\n",
      "2024-10-30 15:00:51,843: Epoch 9 average validation loss: 0.10876 -- Median validation metrics: avg_loss: 0.10876, NSE: 0.75280, MSE: 51269.22656\n",
      "# Epoch 10: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0786]\n",
      "2024-10-30 15:01:47,058: Epoch 10 average loss: avg_loss: 0.12015, avg_total_loss: 0.12015\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.18it/s]\n",
      "2024-10-30 15:01:47,719: Epoch 10 average validation loss: 0.11267 -- Median validation metrics: avg_loss: 0.11267, NSE: 0.74307, MSE: 53286.88672\n",
      "# Epoch 11: 100%|██████████| 23/23 [00:54<00:00,  2.39s/it, Loss: 0.0546]\n",
      "2024-10-30 15:02:42,676: Epoch 11 average loss: avg_loss: 0.12235, avg_total_loss: 0.12235\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  3.95it/s]\n",
      "2024-10-30 15:02:43,419: Epoch 11 average validation loss: 0.12376 -- Median validation metrics: avg_loss: 0.12376, NSE: 0.71746, MSE: 58598.25000\n",
      "# Epoch 12: 100%|██████████| 23/23 [00:56<00:00,  2.46s/it, Loss: 0.0386]\n",
      "2024-10-30 15:03:40,033: Epoch 12 average loss: avg_loss: 0.10911, avg_total_loss: 0.10911\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.53it/s]\n",
      "2024-10-30 15:03:40,676: Epoch 12 average validation loss: 0.13495 -- Median validation metrics: avg_loss: 0.13495, NSE: 0.69176, MSE: 63928.16016\n",
      "# Epoch 13: 100%|██████████| 23/23 [00:55<00:00,  2.43s/it, Loss: 0.0497]\n",
      "2024-10-30 15:04:36,629: Epoch 13 average loss: avg_loss: 0.10885, avg_total_loss: 0.10885\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 15:04:37,250: Epoch 13 average validation loss: 0.11432 -- Median validation metrics: avg_loss: 0.11432, NSE: 0.73904, MSE: 54121.57812\n",
      "# Epoch 14: 100%|██████████| 23/23 [00:55<00:00,  2.39s/it, Loss: 0.0349]\n",
      "2024-10-30 15:05:32,285: Epoch 14 average loss: avg_loss: 0.09833, avg_total_loss: 0.09833\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 15:05:32,972: Epoch 14 average validation loss: 0.12824 -- Median validation metrics: avg_loss: 0.12824, NSE: 0.70911, MSE: 60329.92188\n",
      "# Epoch 15: 100%|██████████| 23/23 [00:53<00:00,  2.32s/it, Loss: 0.4186]\n",
      "2024-10-30 15:06:26,464: Epoch 15 average loss: avg_loss: 0.10940, avg_total_loss: 0.10940\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 15:06:27,112: Epoch 15 average validation loss: 0.11159 -- Median validation metrics: avg_loss: 0.11159, NSE: 0.74552, MSE: 52777.25391\n",
      "# Epoch 16: 100%|██████████| 23/23 [00:53<00:00,  2.33s/it, Loss: 0.0834]\n",
      "2024-10-30 15:07:20,670: Epoch 16 average loss: avg_loss: 0.09733, avg_total_loss: 0.09733\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.80it/s]\n",
      "2024-10-30 15:07:21,329: Epoch 16 average validation loss: 0.11937 -- Median validation metrics: avg_loss: 0.11937, NSE: 0.72783, MSE: 56447.79688\n",
      "# Epoch 17: 100%|██████████| 23/23 [00:57<00:00,  2.51s/it, Loss: 0.0512]\n",
      "2024-10-30 15:08:19,034: Epoch 17 average loss: avg_loss: 0.09434, avg_total_loss: 0.09434\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.68it/s]\n",
      "2024-10-30 15:08:19,655: Epoch 17 average validation loss: 0.11671 -- Median validation metrics: avg_loss: 0.11671, NSE: 0.73466, MSE: 55030.97656\n",
      "# Epoch 18: 100%|██████████| 23/23 [00:51<00:00,  2.23s/it, Loss: 0.0456]\n",
      "2024-10-30 15:09:11,068: Epoch 18 average loss: avg_loss: 0.09998, avg_total_loss: 0.09998\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.09it/s]\n",
      "2024-10-30 15:09:11,769: Epoch 18 average validation loss: 0.10342 -- Median validation metrics: avg_loss: 0.10342, NSE: 0.76415, MSE: 48914.46875\n",
      "# Epoch 19: 100%|██████████| 23/23 [00:54<00:00,  2.37s/it, Loss: 0.0608]\n",
      "2024-10-30 15:10:06,324: Epoch 19 average loss: avg_loss: 0.09449, avg_total_loss: 0.09449\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.79it/s]\n",
      "2024-10-30 15:10:06,964: Epoch 19 average validation loss: 0.12144 -- Median validation metrics: avg_loss: 0.12144, NSE: 0.72349, MSE: 57347.05078\n",
      "# Epoch 20: 100%|██████████| 23/23 [00:53<00:00,  2.33s/it, Loss: 0.3412]\n",
      "2024-10-30 15:11:00,655: Epoch 20 average loss: avg_loss: 0.09446, avg_total_loss: 0.09446\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 15:11:01,257: Epoch 20 average validation loss: 0.10195 -- Median validation metrics: avg_loss: 0.10195, NSE: 0.76734, MSE: 48251.89844\n",
      "# Epoch 21: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.1226]\n",
      "2024-10-30 15:11:56,020: Epoch 21 average loss: avg_loss: 0.08728, avg_total_loss: 0.08728\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.49it/s]\n",
      "2024-10-30 15:11:56,641: Epoch 21 average validation loss: 0.10589 -- Median validation metrics: avg_loss: 0.10589, NSE: 0.75829, MSE: 50129.58594\n",
      "# Epoch 22: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.0992]\n",
      "2024-10-30 15:12:52,837: Epoch 22 average loss: avg_loss: 0.09703, avg_total_loss: 0.09703\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.25it/s]\n",
      "2024-10-30 15:12:53,485: Epoch 22 average validation loss: 0.09250 -- Median validation metrics: avg_loss: 0.09250, NSE: 0.78988, MSE: 43579.05078\n",
      "# Epoch 23: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.4003]\n",
      "2024-10-30 15:13:49,614: Epoch 23 average loss: avg_loss: 0.09465, avg_total_loss: 0.09465\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.58it/s]\n",
      "2024-10-30 15:13:50,253: Epoch 23 average validation loss: 0.11045 -- Median validation metrics: avg_loss: 0.11045, NSE: 0.74782, MSE: 52300.96484\n",
      "# Epoch 24: 100%|██████████| 23/23 [00:56<00:00,  2.45s/it, Loss: 0.1080]\n",
      "2024-10-30 15:14:46,665: Epoch 24 average loss: avg_loss: 0.09062, avg_total_loss: 0.09062\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.49it/s]\n",
      "2024-10-30 15:14:47,387: Epoch 24 average validation loss: 0.11521 -- Median validation metrics: avg_loss: 0.11521, NSE: 0.73709, MSE: 54527.52344\n",
      "# Epoch 25: 100%|██████████| 23/23 [00:52<00:00,  2.29s/it, Loss: 0.0448]\n",
      "2024-10-30 15:15:40,206: Epoch 25 average loss: avg_loss: 0.08495, avg_total_loss: 0.08495\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 15:15:40,825: Epoch 25 average validation loss: 0.10943 -- Median validation metrics: avg_loss: 0.10943, NSE: 0.75042, MSE: 51761.97266\n",
      "# Epoch 26: 100%|██████████| 23/23 [00:53<00:00,  2.34s/it, Loss: 0.0499]\n",
      "2024-10-30 15:16:34,688: Epoch 26 average loss: avg_loss: 0.08502, avg_total_loss: 0.08502\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.55it/s]\n",
      "2024-10-30 15:16:35,329: Epoch 26 average validation loss: 0.10501 -- Median validation metrics: avg_loss: 0.10501, NSE: 0.76073, MSE: 49624.14062\n",
      "# Epoch 27: 100%|██████████| 23/23 [00:55<00:00,  2.39s/it, Loss: 0.0304]\n",
      "2024-10-30 15:17:30,385: Epoch 27 average loss: avg_loss: 0.08281, avg_total_loss: 0.08281\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.94it/s]\n",
      "2024-10-30 15:17:30,974: Epoch 27 average validation loss: 0.09628 -- Median validation metrics: avg_loss: 0.09628, NSE: 0.78040, MSE: 45544.25000\n",
      "# Epoch 28: 100%|██████████| 23/23 [00:54<00:00,  2.39s/it, Loss: 0.1427]\n",
      "2024-10-30 15:18:25,983: Epoch 28 average loss: avg_loss: 0.08038, avg_total_loss: 0.08038\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.58it/s]\n",
      "2024-10-30 15:18:26,602: Epoch 28 average validation loss: 0.10298 -- Median validation metrics: avg_loss: 0.10298, NSE: 0.76531, MSE: 48674.07812\n",
      "# Epoch 29: 100%|██████████| 23/23 [00:54<00:00,  2.37s/it, Loss: 0.0550]\n",
      "2024-10-30 15:19:21,080: Epoch 29 average loss: avg_loss: 0.07318, avg_total_loss: 0.07318\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  3.66it/s]\n",
      "2024-10-30 15:19:21,818: Epoch 29 average validation loss: 0.10578 -- Median validation metrics: avg_loss: 0.10578, NSE: 0.75863, MSE: 50060.11328\n",
      "# Epoch 30: 100%|██████████| 23/23 [00:57<00:00,  2.48s/it, Loss: 0.0211]\n",
      "2024-10-30 15:20:18,858: Epoch 30 average loss: avg_loss: 0.07650, avg_total_loss: 0.07650\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.42it/s]\n",
      "2024-10-30 15:20:19,481: Epoch 30 average validation loss: 0.09728 -- Median validation metrics: avg_loss: 0.09728, NSE: 0.77792, MSE: 46059.21094\n",
      "# Epoch 31: 100%|██████████| 23/23 [00:54<00:00,  2.38s/it, Loss: 0.0418]\n",
      "2024-10-30 15:21:14,311: Epoch 31 average loss: avg_loss: 0.07453, avg_total_loss: 0.07453\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.80it/s]\n",
      "2024-10-30 15:21:15,174: Epoch 31 average validation loss: 0.09954 -- Median validation metrics: avg_loss: 0.09954, NSE: 0.77317, MSE: 47043.36328\n",
      "# Epoch 32: 100%|██████████| 23/23 [00:56<00:00,  2.45s/it, Loss: 0.0323]\n",
      "2024-10-30 15:22:11,610: Epoch 32 average loss: avg_loss: 0.07343, avg_total_loss: 0.07343\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.47it/s]\n",
      "2024-10-30 15:22:12,312: Epoch 32 average validation loss: 0.11556 -- Median validation metrics: avg_loss: 0.11556, NSE: 0.73603, MSE: 54746.94531\n",
      "2024-10-30 15:22:12,322: Logging to F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\\testing_run_3010_152212\\output.log initialized.\n",
      "2024-10-30 15:22:12,322: ### Folder structure created at F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\\testing_run_3010_152212\n",
      "2024-10-30 15:22:12,322: ### Run configurations for testing_run\n",
      "2024-10-30 15:22:12,322: experiment_name: testing_run\n",
      "2024-10-30 15:22:12,332: train_basin_file: train_basin_file_template\n",
      "2024-10-30 15:22:12,332: validation_basin_file: train_basin_file_template\n",
      "2024-10-30 15:22:12,332: test_basin_file: train_basin_file_template\n",
      "2024-10-30 15:22:12,332: train_start_date: 1981-10-01 00:00:00\n",
      "2024-10-30 15:22:12,340: train_end_date: 1997-09-30 00:00:00\n",
      "2024-10-30 15:22:12,342: validation_start_date: 1997-10-01 00:00:00\n",
      "2024-10-30 15:22:12,342: validation_end_date: 2000-09-30 00:00:00\n",
      "2024-10-30 15:22:12,342: test_start_date: 2000-10-01 00:00:00\n",
      "2024-10-30 15:22:12,351: test_end_date: 2005-09-30 00:00:00\n",
      "2024-10-30 15:22:12,353: device: cpu\n",
      "2024-10-30 15:22:12,353: physics_informed: True\n",
      "2024-10-30 15:22:12,353: validate_every: 1\n",
      "2024-10-30 15:22:12,353: validate_n_random_basins: 1\n",
      "2024-10-30 15:22:12,353: metrics: ['NSE', 'MSE']\n",
      "2024-10-30 15:22:12,361: model: cudalstm\n",
      "2024-10-30 15:22:12,363: head: regression\n",
      "2024-10-30 15:22:12,363: output_activation: linear\n",
      "2024-10-30 15:22:12,363: hidden_size: 64\n",
      "2024-10-30 15:22:12,363: initial_forget_bias: 3\n",
      "2024-10-30 15:22:12,363: output_dropout: 0.4\n",
      "2024-10-30 15:22:12,363: optimizer: Adam\n",
      "2024-10-30 15:22:12,363: loss: MSE\n",
      "2024-10-30 15:22:12,371: learning_rate: 0.001\n",
      "2024-10-30 15:22:12,371: batch_size: 256\n",
      "2024-10-30 15:22:12,373: epochs: 32\n",
      "2024-10-30 15:22:12,373: clip_gradient_norm: 1\n",
      "2024-10-30 15:22:12,373: predict_last_n: 1\n",
      "2024-10-30 15:22:12,373: seq_length: 90\n",
      "2024-10-30 15:22:12,373: num_workers: 8\n",
      "2024-10-30 15:22:12,373: log_interval: 4\n",
      "2024-10-30 15:22:12,373: log_tensorboard: True\n",
      "2024-10-30 15:22:12,373: log_n_figures: 1\n",
      "2024-10-30 15:22:12,373: save_weights_every: 1\n",
      "2024-10-30 15:22:12,381: dataset: tuler\n",
      "2024-10-30 15:22:12,381: data_dir: F:\\Dino\\UCB-USACE-LSTMs\\data\n",
      "2024-10-30 15:22:12,383: dynamic_inputs: ['MF_TuleR_S10PRECIP-INC', 'MF_TuleR_S10TEMPERATURE-AIR', 'MF_TuleR_S20PRECIP-INC', 'MF_TuleR_S20TEMPERATURE-AIR', 'NF_TuleR_S10PRECIP-INC', 'NF_TuleR_S10TEMPERATURE-AIR', 'SF_TuleR_S10PRECIP-INC', 'SF_TuleR_S10TEMPERATURE-AIR', 'TuleR_S10PRECIP-INC', 'TuleR_S10TEMPERATURE-AIR', 'TuleR_S20PRECIP-INC', 'TuleR_S20TEMPERATURE-AIR']\n",
      "2024-10-30 15:22:12,383: target_variables: ['ReservoirInflowFLOW-OBSERVED']\n",
      "2024-10-30 15:22:12,383: number_of_basins: 1\n",
      "2024-10-30 15:22:12,383: run_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\\testing_run_3010_152212\n",
      "2024-10-30 15:22:12,383: train_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\\testing_run_3010_152212\\train_data\n",
      "2024-10-30 15:22:12,383: img_log_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\\testing_run_3010_152212\\img_log\n",
      "2024-10-30 15:22:12,383: seed: 462748\n",
      "2024-10-30 15:22:12,383: commit_hash: 61b768d\n",
      "2024-10-30 15:22:12,391: package_version: 1.11.0\n",
      "2024-10-30 15:22:12,393: ### Device cpu will be used for training\n",
      "2024-10-30 15:22:12,393: Loading basin data into xarray data set.\n",
      "100%|██████████| 1/1 [00:00<00:00,  7.08it/s]\n",
      "2024-10-30 15:22:12,544: Create lookup table and convert to pytorch tensor\n",
      "100%|██████████| 1/1 [00:00<00:00,  8.99it/s]\n",
      "# Epoch 1: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.1782]\n",
      "2024-10-30 15:23:08,298: Epoch 1 average loss: avg_loss: 0.37874, avg_total_loss: 0.37874\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  3.08it/s]\n",
      "2024-10-30 15:23:09,120: Epoch 1 average validation loss: 0.18850 -- Median validation metrics: avg_loss: 0.18850, NSE: 0.56942, MSE: 89301.39062\n",
      "# Epoch 2: 100%|██████████| 23/23 [00:56<00:00,  2.45s/it, Loss: 0.1655]\n",
      "2024-10-30 15:24:05,565: Epoch 2 average loss: avg_loss: 0.26827, avg_total_loss: 0.26827\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.14it/s]\n",
      "2024-10-30 15:24:06,195: Epoch 2 average validation loss: 0.13681 -- Median validation metrics: avg_loss: 0.13681, NSE: 0.68807, MSE: 64693.03516\n",
      "# Epoch 3: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.3405]\n",
      "2024-10-30 15:25:01,803: Epoch 3 average loss: avg_loss: 0.23034, avg_total_loss: 0.23034\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.58it/s]\n",
      "2024-10-30 15:25:02,373: Epoch 3 average validation loss: 0.12590 -- Median validation metrics: avg_loss: 0.12590, NSE: 0.71260, MSE: 59606.28906\n",
      "# Epoch 4: 100%|██████████| 23/23 [00:55<00:00,  2.43s/it, Loss: 0.1098]\n",
      "2024-10-30 15:25:58,274: Epoch 4 average loss: avg_loss: 0.18897, avg_total_loss: 0.18897\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  4.26it/s]\n",
      "2024-10-30 15:25:58,985: Epoch 4 average validation loss: 0.10828 -- Median validation metrics: avg_loss: 0.10828, NSE: 0.75317, MSE: 51190.92969\n",
      "# Epoch 5: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.0930]\n",
      "2024-10-30 15:26:54,342: Epoch 5 average loss: avg_loss: 0.17400, avg_total_loss: 0.17400\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.18it/s]\n",
      "2024-10-30 15:26:54,978: Epoch 5 average validation loss: 0.10066 -- Median validation metrics: avg_loss: 0.10066, NSE: 0.77015, MSE: 47669.55469\n",
      "# Epoch 6: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0627]\n",
      "2024-10-30 15:27:50,141: Epoch 6 average loss: avg_loss: 0.15603, avg_total_loss: 0.15603\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.10it/s]\n",
      "2024-10-30 15:27:50,759: Epoch 6 average validation loss: 0.08439 -- Median validation metrics: avg_loss: 0.08439, NSE: 0.80766, MSE: 39891.31250\n",
      "# Epoch 7: 100%|██████████| 23/23 [00:55<00:00,  2.39s/it, Loss: 0.0599]\n",
      "2024-10-30 15:28:45,833: Epoch 7 average loss: avg_loss: 0.14037, avg_total_loss: 0.14037\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.47it/s]\n",
      "2024-10-30 15:28:46,522: Epoch 7 average validation loss: 0.09909 -- Median validation metrics: avg_loss: 0.09909, NSE: 0.77414, MSE: 46842.58203\n",
      "# Epoch 8: 100%|██████████| 23/23 [00:56<00:00,  2.45s/it, Loss: 0.0332]\n",
      "2024-10-30 15:29:42,856: Epoch 8 average loss: avg_loss: 0.13858, avg_total_loss: 0.13858\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.81it/s]\n",
      "2024-10-30 15:29:43,512: Epoch 8 average validation loss: 0.11224 -- Median validation metrics: avg_loss: 0.11224, NSE: 0.74378, MSE: 53138.69922\n",
      "# Epoch 9: 100%|██████████| 23/23 [00:56<00:00,  2.47s/it, Loss: 0.4945]\n",
      "2024-10-30 15:30:40,273: Epoch 9 average loss: avg_loss: 0.13879, avg_total_loss: 0.13879\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.82it/s]\n",
      "2024-10-30 15:30:40,910: Epoch 9 average validation loss: 0.10876 -- Median validation metrics: avg_loss: 0.10876, NSE: 0.75280, MSE: 51269.22656\n",
      "# Epoch 10: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.0786]\n",
      "2024-10-30 15:31:36,426: Epoch 10 average loss: avg_loss: 0.12015, avg_total_loss: 0.12015\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.57it/s]\n",
      "2024-10-30 15:31:37,066: Epoch 10 average validation loss: 0.11267 -- Median validation metrics: avg_loss: 0.11267, NSE: 0.74307, MSE: 53286.88672\n",
      "# Epoch 11: 100%|██████████| 23/23 [00:54<00:00,  2.37s/it, Loss: 0.0546]\n",
      "2024-10-30 15:32:31,566: Epoch 11 average loss: avg_loss: 0.12235, avg_total_loss: 0.12235\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.47it/s]\n",
      "2024-10-30 15:32:32,174: Epoch 11 average validation loss: 0.12376 -- Median validation metrics: avg_loss: 0.12376, NSE: 0.71746, MSE: 58598.25000\n",
      "# Epoch 12: 100%|██████████| 23/23 [00:55<00:00,  2.41s/it, Loss: 0.0386]\n",
      "2024-10-30 15:33:27,743: Epoch 12 average loss: avg_loss: 0.10911, avg_total_loss: 0.10911\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.49it/s]\n",
      "2024-10-30 15:33:28,413: Epoch 12 average validation loss: 0.13495 -- Median validation metrics: avg_loss: 0.13495, NSE: 0.69176, MSE: 63928.16016\n",
      "# Epoch 13: 100%|██████████| 23/23 [00:55<00:00,  2.43s/it, Loss: 0.0497]\n",
      "2024-10-30 15:34:24,233: Epoch 13 average loss: avg_loss: 0.10885, avg_total_loss: 0.10885\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 15:34:24,861: Epoch 13 average validation loss: 0.11432 -- Median validation metrics: avg_loss: 0.11432, NSE: 0.73904, MSE: 54121.57812\n",
      "# Epoch 14: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0349]\n",
      "2024-10-30 15:35:20,153: Epoch 14 average loss: avg_loss: 0.09833, avg_total_loss: 0.09833\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.48it/s]\n",
      "2024-10-30 15:35:20,821: Epoch 14 average validation loss: 0.12824 -- Median validation metrics: avg_loss: 0.12824, NSE: 0.70911, MSE: 60329.92188\n",
      "# Epoch 15: 100%|██████████| 23/23 [00:54<00:00,  2.37s/it, Loss: 0.4186]\n",
      "2024-10-30 15:36:15,421: Epoch 15 average loss: avg_loss: 0.10940, avg_total_loss: 0.10940\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.58it/s]\n",
      "2024-10-30 15:36:16,024: Epoch 15 average validation loss: 0.11159 -- Median validation metrics: avg_loss: 0.11159, NSE: 0.74552, MSE: 52777.25391\n",
      "# Epoch 16: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.0834]\n",
      "2024-10-30 15:37:11,629: Epoch 16 average loss: avg_loss: 0.09733, avg_total_loss: 0.09733\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.16it/s]\n",
      "2024-10-30 15:37:12,278: Epoch 16 average validation loss: 0.11937 -- Median validation metrics: avg_loss: 0.11937, NSE: 0.72783, MSE: 56447.79688\n",
      "# Epoch 17: 100%|██████████| 23/23 [00:54<00:00,  2.36s/it, Loss: 0.0512]\n",
      "2024-10-30 15:38:06,574: Epoch 17 average loss: avg_loss: 0.09434, avg_total_loss: 0.09434\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.85it/s]\n",
      "2024-10-30 15:38:07,200: Epoch 17 average validation loss: 0.11671 -- Median validation metrics: avg_loss: 0.11671, NSE: 0.73466, MSE: 55030.97656\n",
      "# Epoch 18: 100%|██████████| 23/23 [00:54<00:00,  2.36s/it, Loss: 0.0456]\n",
      "2024-10-30 15:39:01,461: Epoch 18 average loss: avg_loss: 0.09998, avg_total_loss: 0.09998\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.88it/s]\n",
      "2024-10-30 15:39:02,084: Epoch 18 average validation loss: 0.10342 -- Median validation metrics: avg_loss: 0.10342, NSE: 0.76415, MSE: 48914.46875\n",
      "# Epoch 19: 100%|██████████| 23/23 [00:53<00:00,  2.31s/it, Loss: 0.0608]\n",
      "2024-10-30 15:39:55,182: Epoch 19 average loss: avg_loss: 0.09449, avg_total_loss: 0.09449\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.57it/s]\n",
      "2024-10-30 15:39:55,772: Epoch 19 average validation loss: 0.12144 -- Median validation metrics: avg_loss: 0.12144, NSE: 0.72349, MSE: 57347.05078\n",
      "# Epoch 20: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.3412]\n",
      "2024-10-30 15:40:51,861: Epoch 20 average loss: avg_loss: 0.09446, avg_total_loss: 0.09446\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.81it/s]\n",
      "2024-10-30 15:40:52,530: Epoch 20 average validation loss: 0.10195 -- Median validation metrics: avg_loss: 0.10195, NSE: 0.76734, MSE: 48251.89844\n",
      "# Epoch 21: 100%|██████████| 23/23 [00:55<00:00,  2.42s/it, Loss: 0.1226]\n",
      "2024-10-30 15:41:48,186: Epoch 21 average loss: avg_loss: 0.08728, avg_total_loss: 0.08728\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.58it/s]\n",
      "2024-10-30 15:41:49,131: Epoch 21 average validation loss: 0.10589 -- Median validation metrics: avg_loss: 0.10589, NSE: 0.75829, MSE: 50129.58594\n",
      "# Epoch 22: 100%|██████████| 23/23 [00:56<00:00,  2.44s/it, Loss: 0.0992]\n",
      "2024-10-30 15:42:45,246: Epoch 22 average loss: avg_loss: 0.09703, avg_total_loss: 0.09703\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.25it/s]\n",
      "2024-10-30 15:42:45,904: Epoch 22 average validation loss: 0.09250 -- Median validation metrics: avg_loss: 0.09250, NSE: 0.78988, MSE: 43579.05078\n",
      "# Epoch 23: 100%|██████████| 23/23 [00:54<00:00,  2.37s/it, Loss: 0.4003]\n",
      "2024-10-30 15:43:40,556: Epoch 23 average loss: avg_loss: 0.09465, avg_total_loss: 0.09465\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.58it/s]\n",
      "2024-10-30 15:43:41,166: Epoch 23 average validation loss: 0.11045 -- Median validation metrics: avg_loss: 0.11045, NSE: 0.74782, MSE: 52300.96484\n",
      "# Epoch 24: 100%|██████████| 23/23 [00:54<00:00,  2.39s/it, Loss: 0.1080]\n",
      "2024-10-30 15:44:36,115: Epoch 24 average loss: avg_loss: 0.09062, avg_total_loss: 0.09062\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.80it/s]\n",
      "2024-10-30 15:44:36,785: Epoch 24 average validation loss: 0.11521 -- Median validation metrics: avg_loss: 0.11521, NSE: 0.73709, MSE: 54527.52344\n",
      "# Epoch 25: 100%|██████████| 23/23 [00:55<00:00,  2.43s/it, Loss: 0.0448]\n",
      "2024-10-30 15:45:32,671: Epoch 25 average loss: avg_loss: 0.08495, avg_total_loss: 0.08495\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.94it/s]\n",
      "2024-10-30 15:45:33,293: Epoch 25 average validation loss: 0.10943 -- Median validation metrics: avg_loss: 0.10943, NSE: 0.75042, MSE: 51761.97266\n",
      "# Epoch 26: 100%|██████████| 23/23 [00:54<00:00,  2.36s/it, Loss: 0.0499]\n",
      "2024-10-30 15:46:27,651: Epoch 26 average loss: avg_loss: 0.08502, avg_total_loss: 0.08502\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.85it/s]\n",
      "2024-10-30 15:46:28,291: Epoch 26 average validation loss: 0.10501 -- Median validation metrics: avg_loss: 0.10501, NSE: 0.76073, MSE: 49624.14062\n",
      "# Epoch 27: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0304]\n",
      "2024-10-30 15:47:23,458: Epoch 27 average loss: avg_loss: 0.08281, avg_total_loss: 0.08281\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.49it/s]\n",
      "2024-10-30 15:47:24,071: Epoch 27 average validation loss: 0.09628 -- Median validation metrics: avg_loss: 0.09628, NSE: 0.78040, MSE: 45544.25000\n",
      "# Epoch 28: 100%|██████████| 23/23 [00:55<00:00,  2.43s/it, Loss: 0.1427]\n",
      "2024-10-30 15:48:19,930: Epoch 28 average loss: avg_loss: 0.08038, avg_total_loss: 0.08038\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  5.80it/s]\n",
      "2024-10-30 15:48:20,590: Epoch 28 average validation loss: 0.10298 -- Median validation metrics: avg_loss: 0.10298, NSE: 0.76531, MSE: 48674.07812\n",
      "# Epoch 29: 100%|██████████| 23/23 [00:56<00:00,  2.45s/it, Loss: 0.0550]\n",
      "2024-10-30 15:49:16,887: Epoch 29 average loss: avg_loss: 0.07318, avg_total_loss: 0.07318\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.95it/s]\n",
      "2024-10-30 15:49:17,505: Epoch 29 average validation loss: 0.10578 -- Median validation metrics: avg_loss: 0.10578, NSE: 0.75863, MSE: 50060.11328\n",
      "# Epoch 30: 100%|██████████| 23/23 [00:54<00:00,  2.36s/it, Loss: 0.0211]\n",
      "2024-10-30 15:50:11,877: Epoch 30 average loss: avg_loss: 0.07650, avg_total_loss: 0.07650\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.17it/s]\n",
      "2024-10-30 15:50:12,506: Epoch 30 average validation loss: 0.09728 -- Median validation metrics: avg_loss: 0.09728, NSE: 0.77792, MSE: 46059.21094\n",
      "# Epoch 31: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0418]\n",
      "2024-10-30 15:51:07,837: Epoch 31 average loss: avg_loss: 0.07453, avg_total_loss: 0.07453\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  7.04it/s]\n",
      "2024-10-30 15:51:08,435: Epoch 31 average validation loss: 0.09954 -- Median validation metrics: avg_loss: 0.09954, NSE: 0.77317, MSE: 47043.36328\n",
      "# Epoch 32: 100%|██████████| 23/23 [00:55<00:00,  2.40s/it, Loss: 0.0323]\n",
      "2024-10-30 15:52:03,629: Epoch 32 average loss: avg_loss: 0.07343, avg_total_loss: 0.07343\n",
      "# Validation: 100%|██████████| 1/1 [00:00<00:00,  6.49it/s]\n",
      "2024-10-30 15:52:04,229: Epoch 32 average validation loss: 0.11556 -- Median validation metrics: avg_loss: 0.11556, NSE: 0.73603, MSE: 54746.94531\n",
      "2024-10-30 15:52:04,250: Logging to F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\\testing_run_3010_152212\\testing_run_3010_155204\\output.log initialized.\n",
      "2024-10-30 15:52:04,250: ### Folder structure created at F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\\testing_run_3010_152212\\testing_run_3010_155204\n",
      "2024-10-30 15:52:04,258: ### Run configurations for testing_run\n",
      "2024-10-30 15:52:04,260: experiment_name: testing_run\n",
      "2024-10-30 15:52:04,260: train_basin_file: train_basin_file_template\n",
      "2024-10-30 15:52:04,260: validation_basin_file: train_basin_file_template\n",
      "2024-10-30 15:52:04,260: test_basin_file: train_basin_file_template\n",
      "2024-10-30 15:52:04,268: train_start_date: 1981-10-01 00:00:00\n",
      "2024-10-30 15:52:04,270: train_end_date: 1997-09-30 00:00:00\n",
      "2024-10-30 15:52:04,270: validation_start_date: 1997-10-01 00:00:00\n",
      "2024-10-30 15:52:04,270: validation_end_date: 2000-09-30 00:00:00\n",
      "2024-10-30 15:52:04,270: test_start_date: 2000-10-01 00:00:00\n",
      "2024-10-30 15:52:04,278: test_end_date: 2005-09-30 00:00:00\n",
      "2024-10-30 15:52:04,280: device: cpu\n",
      "2024-10-30 15:52:04,280: physics_informed: True\n",
      "2024-10-30 15:52:04,280: validate_every: 1\n",
      "2024-10-30 15:52:04,280: validate_n_random_basins: 1\n",
      "2024-10-30 15:52:04,280: metrics: ['NSE', 'MSE']\n",
      "2024-10-30 15:52:04,280: model: cudalstm\n",
      "2024-10-30 15:52:04,280: head: regression\n",
      "2024-10-30 15:52:04,288: output_activation: linear\n",
      "2024-10-30 15:52:04,288: hidden_size: 64\n",
      "2024-10-30 15:52:04,290: initial_forget_bias: 3\n",
      "2024-10-30 15:52:04,290: output_dropout: 0.4\n",
      "2024-10-30 15:52:04,290: optimizer: Adam\n",
      "2024-10-30 15:52:04,290: loss: MSE\n",
      "2024-10-30 15:52:04,290: learning_rate: 0.001\n",
      "2024-10-30 15:52:04,290: batch_size: 256\n",
      "2024-10-30 15:52:04,290: epochs: 32\n",
      "2024-10-30 15:52:04,298: clip_gradient_norm: 1\n",
      "2024-10-30 15:52:04,298: predict_last_n: 1\n",
      "2024-10-30 15:52:04,300: seq_length: 90\n",
      "2024-10-30 15:52:04,300: num_workers: 8\n",
      "2024-10-30 15:52:04,300: log_interval: 4\n",
      "2024-10-30 15:52:04,300: log_tensorboard: True\n",
      "2024-10-30 15:52:04,300: log_n_figures: 1\n",
      "2024-10-30 15:52:04,300: save_weights_every: 1\n",
      "2024-10-30 15:52:04,300: dataset: tuler\n",
      "2024-10-30 15:52:04,308: data_dir: F:\\Dino\\UCB-USACE-LSTMs\\data\n",
      "2024-10-30 15:52:04,308: dynamic_inputs: ['MF_TuleR_S10PRECIP-INC', 'MF_TuleR_S10TEMPERATURE-AIR', 'MF_TuleR_S20PRECIP-INC', 'MF_TuleR_S20TEMPERATURE-AIR', 'NF_TuleR_S10PRECIP-INC', 'NF_TuleR_S10TEMPERATURE-AIR', 'SF_TuleR_S10PRECIP-INC', 'SF_TuleR_S10TEMPERATURE-AIR', 'TuleR_S10PRECIP-INC', 'TuleR_S10TEMPERATURE-AIR', 'TuleR_S20PRECIP-INC', 'TuleR_S20TEMPERATURE-AIR']\n",
      "2024-10-30 15:52:04,310: target_variables: ['ReservoirInflowFLOW-OBSERVED']\n",
      "2024-10-30 15:52:04,310: number_of_basins: 1\n",
      "2024-10-30 15:52:04,310: run_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\\testing_run_3010_152212\\testing_run_3010_155204\n",
      "2024-10-30 15:52:04,310: train_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\\testing_run_3010_152212\\testing_run_3010_155204\\train_data\n",
      "2024-10-30 15:52:04,310: img_log_dir: F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\runs\\testing_run_3010_125502\\testing_run_3010_132443\\testing_run_3010_135306\\testing_run_3010_142246\\testing_run_3010_145229\\testing_run_3010_152212\\testing_run_3010_155204\\img_log\n",
      "2024-10-30 15:52:04,310: seed: 462748\n",
      "2024-10-30 15:52:04,310: commit_hash: 61b768d\n",
      "2024-10-30 15:52:04,318: package_version: 1.11.0\n",
      "2024-10-30 15:52:04,320: ### Device cpu will be used for training\n",
      "2024-10-30 15:52:04,320: Loading basin data into xarray data set.\n",
      "100%|██████████| 1/1 [00:00<00:00,  6.57it/s]\n",
      "2024-10-30 15:52:04,501: Create lookup table and convert to pytorch tensor\n",
      "100%|██████████| 1/1 [00:00<00:00, 10.90it/s]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception in thread Thread-14:\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3577, in run_code\n",
      "    exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "  File \"C:\\Users\\Dino\\AppData\\Local\\Temp\\ipykernel_24536\\4032920361.py\", line 1, in <module>\n",
      "  File \"F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\UCB_train.py\", line 60, in train\n",
      "    self.model = self._train_ensemble() # returns dict with predictions on test set and metrics\n",
      "                 ^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\UCB_train.py\", line 101, in _train_ensemble\n",
      "    path = self._train_model()\n",
      "           ^^^^^^^^^^^^^^^^^^^\n",
      "  File \"F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\UCB_train.py\", line 84, in _train_model\n",
      "    start_training(self._config)\n",
      "  File \"F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\..\\..\\..\\UCB-USACE-LSTMs\\neuralhydrology\\training\\train.py\", line 19, in start_training\n",
      "    trainer.initialize_training()\n",
      "  File \"F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\..\\..\\..\\UCB-USACE-LSTMs\\neuralhydrology\\training\\basetrainer.py\", line 178, in initialize_training\n",
      "    self.experiment_logger.start_tb()\n",
      "  File \"F:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\..\\..\\..\\UCB-USACE-LSTMs\\neuralhydrology\\training\\logger.py\", line 76, in start_tb\n",
      "    self.writer = SummaryWriter(log_dir=str(self.log_dir))\n",
      "                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\torch\\utils\\tensorboard\\writer.py\", line 250, in __init__\n",
      "    self._get_file_writer()\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\torch\\utils\\tensorboard\\writer.py\", line 265, in _get_file_writer\n",
      "    self.file_writer = FileWriter(\n",
      "                       ^^^^^^^^^^^\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\torch\\utils\\tensorboard\\writer.py\", line 76, in __init__\n",
      "    self.event_writer = EventFileWriter(\n",
      "                        ^^^^^^^^^^^^^^^^\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\event_file_writer.py\", line 100, in __init__\n",
      "    self.flush()\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\event_file_writer.py\", line 125, in flush\n",
      "    self._async_writer.flush()\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\event_file_writer.py\", line 194, in flush\n",
      "    self._check_worker_status()\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\event_file_writer.py\", line 212, in _check_worker_status\n",
      "    raise exception\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\threading.py\", line 1073, in _bootstrap_inner\n",
      "    self.run()\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\event_file_writer.py\", line 244, in run\n",
      "    self._run()\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\event_file_writer.py\", line 275, in _run\n",
      "    self._record_writer.write(data)\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\record_writer.py\", line 40, in write\n",
      "    self._writer.write(header + header_crc + data + footer_crc)\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\io\\gfile.py\", line 770, in write\n",
      "    self.fs.write(self.filename, file_content, self.binary_mode)\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\io\\gfile.py\", line 157, in write\n",
      "    self._write(filename, file_content, \"wb\" if binary_mode else \"w\")\n",
      "  File \"C:\\Users\\Dino\\anaconda3\\Lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\io\\gfile.py\", line 171, in _write\n",
      "    with io.open(filename, mode, encoding=encoding) as f:\n",
      "         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "FileNotFoundError: [Errno 2] No such file or directory: b'F:\\\\Dino\\\\UCB-USACE-LSTMs\\\\neuralhydrology\\\\UCB_training\\\\runs\\\\testing_run_3010_125502\\\\testing_run_3010_132443\\\\testing_run_3010_135306\\\\testing_run_3010_142246\\\\testing_run_3010_145229\\\\testing_run_3010_152212\\\\testing_run_3010_155204\\\\events.out.tfevents.1730328724.GEOG-565-3W.24536.7'\n"
     ]
    },
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: b'F:\\\\Dino\\\\UCB-USACE-LSTMs\\\\neuralhydrology\\\\UCB_training\\\\runs\\\\testing_run_3010_125502\\\\testing_run_3010_132443\\\\testing_run_3010_135306\\\\testing_run_3010_142246\\\\testing_run_3010_145229\\\\testing_run_3010_152212\\\\testing_run_3010_155204\\\\events.out.tfevents.1730328724.GEOG-565-3W.24536.7'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[7], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m trainer\u001b[38;5;241m.\u001b[39mtrain()\n",
      "File \u001b[1;32mF:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\UCB_train.py:60\u001b[0m, in \u001b[0;36mUCB_trainer.train\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     58\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_eval_model(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_model)\n\u001b[0;32m     59\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m---> 60\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_train_ensemble() \u001b[38;5;66;03m# returns dict with predictions on test set and metrics\u001b[39;00m\n\u001b[0;32m     61\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m\n",
      "File \u001b[1;32mF:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\UCB_train.py:101\u001b[0m, in \u001b[0;36mUCB_trainer._train_ensemble\u001b[1;34m(self, period)\u001b[0m\n\u001b[0;32m     99\u001b[0m paths \u001b[38;5;241m=\u001b[39m [] \u001b[38;5;66;03m#store the path of the results of the model\u001b[39;00m\n\u001b[0;32m    100\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_num_ensemble_members):\n\u001b[1;32m--> 101\u001b[0m     path \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_train_model()\n\u001b[0;32m    102\u001b[0m     paths\u001b[38;5;241m.\u001b[39mappend(path)\n\u001b[0;32m    104\u001b[0m \u001b[38;5;66;03m#for each path evaluate the model    \u001b[39;00m\n",
      "File \u001b[1;32mF:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\UCB_train.py:84\u001b[0m, in \u001b[0;36mUCB_trainer._train_model\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     81\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_gpu \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_gpu \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[0;32m     82\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_config\u001b[38;5;241m.\u001b[39mdevice \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m---> 84\u001b[0m start_training(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_config)\n\u001b[0;32m     85\u001b[0m path \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_config\u001b[38;5;241m.\u001b[39mrun_dir\n\u001b[0;32m     86\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m path\n",
      "File \u001b[1;32mF:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\..\\..\\..\\UCB-USACE-LSTMs\\neuralhydrology\\training\\train.py:19\u001b[0m, in \u001b[0;36mstart_training\u001b[1;34m(cfg)\u001b[0m\n\u001b[0;32m     17\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m     18\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUnknown head \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mcfg\u001b[38;5;241m.\u001b[39mhead\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m---> 19\u001b[0m trainer\u001b[38;5;241m.\u001b[39minitialize_training()\n\u001b[0;32m     20\u001b[0m trainer\u001b[38;5;241m.\u001b[39mtrain_and_validate()\n",
      "File \u001b[1;32mF:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\..\\..\\..\\UCB-USACE-LSTMs\\neuralhydrology\\training\\basetrainer.py:178\u001b[0m, in \u001b[0;36mBaseTrainer.initialize_training\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    176\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexperiment_logger \u001b[38;5;241m=\u001b[39m Logger(cfg\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcfg)\n\u001b[0;32m    177\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcfg\u001b[38;5;241m.\u001b[39mlog_tensorboard:\n\u001b[1;32m--> 178\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexperiment_logger\u001b[38;5;241m.\u001b[39mstart_tb()\n\u001b[0;32m    180\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcfg\u001b[38;5;241m.\u001b[39mis_continue_training:\n\u001b[0;32m    181\u001b[0m     \u001b[38;5;66;03m# set epoch and iteration step counter to continue from the selected checkpoint\u001b[39;00m\n\u001b[0;32m    182\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexperiment_logger\u001b[38;5;241m.\u001b[39mepoch \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_epoch\n",
      "File \u001b[1;32mF:\\Dino\\UCB-USACE-LSTMs\\neuralhydrology\\UCB_training\\..\\..\\..\\UCB-USACE-LSTMs\\neuralhydrology\\training\\logger.py:76\u001b[0m, in \u001b[0;36mLogger.start_tb\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     74\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mstart_tb\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[0;32m     75\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\" Start tensorboard logging. \"\"\"\u001b[39;00m\n\u001b[1;32m---> 76\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwriter \u001b[38;5;241m=\u001b[39m SummaryWriter(log_dir\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mstr\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog_dir))\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\torch\\utils\\tensorboard\\writer.py:250\u001b[0m, in \u001b[0;36mSummaryWriter.__init__\u001b[1;34m(self, log_dir, comment, purge_step, max_queue, flush_secs, filename_suffix)\u001b[0m\n\u001b[0;32m    247\u001b[0m \u001b[38;5;66;03m# Initialize the file writers, but they can be cleared out on close\u001b[39;00m\n\u001b[0;32m    248\u001b[0m \u001b[38;5;66;03m# and recreated later as needed.\u001b[39;00m\n\u001b[0;32m    249\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfile_writer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mall_writers \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m--> 250\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_file_writer()\n\u001b[0;32m    252\u001b[0m \u001b[38;5;66;03m# Create default bins for histograms, see generate_testdata.py in tensorflow/tensorboard\u001b[39;00m\n\u001b[0;32m    253\u001b[0m v \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1e-12\u001b[39m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\torch\\utils\\tensorboard\\writer.py:265\u001b[0m, in \u001b[0;36mSummaryWriter._get_file_writer\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    263\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Return the default FileWriter instance. Recreates it if closed.\"\"\"\u001b[39;00m\n\u001b[0;32m    264\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mall_writers \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfile_writer \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m--> 265\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfile_writer \u001b[38;5;241m=\u001b[39m FileWriter(\n\u001b[0;32m    266\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog_dir, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmax_queue, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mflush_secs, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfilename_suffix\n\u001b[0;32m    267\u001b[0m     )\n\u001b[0;32m    268\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mall_writers \u001b[38;5;241m=\u001b[39m {\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfile_writer\u001b[38;5;241m.\u001b[39mget_logdir(): \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfile_writer}\n\u001b[0;32m    269\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpurge_step \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\torch\\utils\\tensorboard\\writer.py:76\u001b[0m, in \u001b[0;36mFileWriter.__init__\u001b[1;34m(self, log_dir, max_queue, flush_secs, filename_suffix)\u001b[0m\n\u001b[0;32m     71\u001b[0m \u001b[38;5;66;03m# Sometimes PosixPath is passed in and we need to coerce it to\u001b[39;00m\n\u001b[0;32m     72\u001b[0m \u001b[38;5;66;03m# a string in all cases\u001b[39;00m\n\u001b[0;32m     73\u001b[0m \u001b[38;5;66;03m# TODO: See if we can remove this in the future if we are\u001b[39;00m\n\u001b[0;32m     74\u001b[0m \u001b[38;5;66;03m# actually the ones passing in a PosixPath\u001b[39;00m\n\u001b[0;32m     75\u001b[0m log_dir \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mstr\u001b[39m(log_dir)\n\u001b[1;32m---> 76\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mevent_writer \u001b[38;5;241m=\u001b[39m EventFileWriter(\n\u001b[0;32m     77\u001b[0m     log_dir, max_queue, flush_secs, filename_suffix\n\u001b[0;32m     78\u001b[0m )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\event_file_writer.py:100\u001b[0m, in \u001b[0;36mEventFileWriter.__init__\u001b[1;34m(self, logdir, max_queue_size, flush_secs, filename_suffix)\u001b[0m\n\u001b[0;32m     92\u001b[0m _event \u001b[38;5;241m=\u001b[39m event_pb2\u001b[38;5;241m.\u001b[39mEvent(\n\u001b[0;32m     93\u001b[0m     wall_time\u001b[38;5;241m=\u001b[39mtime\u001b[38;5;241m.\u001b[39mtime(),\n\u001b[0;32m     94\u001b[0m     file_version\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbrain.Event:2\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     97\u001b[0m     ),\n\u001b[0;32m     98\u001b[0m )\n\u001b[0;32m     99\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39madd_event(_event)\n\u001b[1;32m--> 100\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mflush()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\event_file_writer.py:125\u001b[0m, in \u001b[0;36mEventFileWriter.flush\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    119\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mflush\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[0;32m    120\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Flushes the event file to disk.\u001b[39;00m\n\u001b[0;32m    121\u001b[0m \n\u001b[0;32m    122\u001b[0m \u001b[38;5;124;03m    Call this method to make sure that all pending events have been\u001b[39;00m\n\u001b[0;32m    123\u001b[0m \u001b[38;5;124;03m    written to disk.\u001b[39;00m\n\u001b[0;32m    124\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 125\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_async_writer\u001b[38;5;241m.\u001b[39mflush()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\event_file_writer.py:194\u001b[0m, in \u001b[0;36m_AsyncWriter.flush\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    190\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_writer\u001b[38;5;241m.\u001b[39mflush()\n\u001b[0;32m    191\u001b[0m \u001b[38;5;66;03m# Check the status again in case the background worker thread has\u001b[39;00m\n\u001b[0;32m    192\u001b[0m \u001b[38;5;66;03m# failed in the meantime to avoid waiting until the next call to\u001b[39;00m\n\u001b[0;32m    193\u001b[0m \u001b[38;5;66;03m# surface the error.\u001b[39;00m\n\u001b[1;32m--> 194\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_worker_status()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\event_file_writer.py:212\u001b[0m, in \u001b[0;36m_AsyncWriter._check_worker_status\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    210\u001b[0m exception \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_worker\u001b[38;5;241m.\u001b[39mexception\n\u001b[0;32m    211\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m exception \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m--> 212\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m exception\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\threading.py:1073\u001b[0m, in \u001b[0;36mThread._bootstrap_inner\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1070\u001b[0m     _sys\u001b[38;5;241m.\u001b[39msetprofile(_profile_hook)\n\u001b[0;32m   1072\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 1073\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrun()\n\u001b[0;32m   1074\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m:\n\u001b[0;32m   1075\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_invoke_excepthook(\u001b[38;5;28mself\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\event_file_writer.py:244\u001b[0m, in \u001b[0;36m_AsyncWriterThread.run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    242\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrun\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[0;32m    243\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 244\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_run()\n\u001b[0;32m    245\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m ex:\n\u001b[0;32m    246\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexception \u001b[38;5;241m=\u001b[39m ex\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\event_file_writer.py:275\u001b[0m, in \u001b[0;36m_AsyncWriterThread._run\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    273\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m data \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_shutdown_signal:\n\u001b[0;32m    274\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[1;32m--> 275\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_record_writer\u001b[38;5;241m.\u001b[39mwrite(data)\n\u001b[0;32m    276\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_has_pending_data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[0;32m    277\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m queue\u001b[38;5;241m.\u001b[39mEmpty:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\tensorboard\\summary\\writer\\record_writer.py:40\u001b[0m, in \u001b[0;36mRecordWriter.write\u001b[1;34m(self, data)\u001b[0m\n\u001b[0;32m     38\u001b[0m header_crc \u001b[38;5;241m=\u001b[39m struct\u001b[38;5;241m.\u001b[39mpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<I\u001b[39m\u001b[38;5;124m\"\u001b[39m, masked_crc32c(header))\n\u001b[0;32m     39\u001b[0m footer_crc \u001b[38;5;241m=\u001b[39m struct\u001b[38;5;241m.\u001b[39mpack(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m<I\u001b[39m\u001b[38;5;124m\"\u001b[39m, masked_crc32c(data))\n\u001b[1;32m---> 40\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_writer\u001b[38;5;241m.\u001b[39mwrite(header \u001b[38;5;241m+\u001b[39m header_crc \u001b[38;5;241m+\u001b[39m data \u001b[38;5;241m+\u001b[39m footer_crc)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\io\\gfile.py:770\u001b[0m, in \u001b[0;36mGFile.write\u001b[1;34m(self, file_content)\u001b[0m\n\u001b[0;32m    767\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfs_supports_append:\n\u001b[0;32m    768\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwrite_started:\n\u001b[0;32m    769\u001b[0m         \u001b[38;5;66;03m# write the first chunk to truncate file if it already exists\u001b[39;00m\n\u001b[1;32m--> 770\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfs\u001b[38;5;241m.\u001b[39mwrite(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfilename, file_content, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbinary_mode)\n\u001b[0;32m    771\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwrite_started \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[0;32m    773\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    774\u001b[0m         \u001b[38;5;66;03m# append the later chunks\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\io\\gfile.py:157\u001b[0m, in \u001b[0;36mLocalFileSystem.write\u001b[1;34m(self, filename, file_content, binary_mode)\u001b[0m\n\u001b[0;32m    148\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mwrite\u001b[39m(\u001b[38;5;28mself\u001b[39m, filename, file_content, binary_mode\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m):\n\u001b[0;32m    149\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Writes string file contents to a file, overwriting any existing\u001b[39;00m\n\u001b[0;32m    150\u001b[0m \u001b[38;5;124;03m    contents.\u001b[39;00m\n\u001b[0;32m    151\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    155\u001b[0m \u001b[38;5;124;03m        binary_mode: bool, write as binary if True, otherwise text\u001b[39;00m\n\u001b[0;32m    156\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 157\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_write(filename, file_content, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m binary_mode \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mw\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\tensorboard\\compat\\tensorflow_stub\\io\\gfile.py:171\u001b[0m, in \u001b[0;36mLocalFileSystem._write\u001b[1;34m(self, filename, file_content, mode)\u001b[0m\n\u001b[0;32m    169\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_write\u001b[39m(\u001b[38;5;28mself\u001b[39m, filename, file_content, mode):\n\u001b[0;32m    170\u001b[0m     encoding \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m mode \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mutf8\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m--> 171\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m io\u001b[38;5;241m.\u001b[39mopen(filename, mode, encoding\u001b[38;5;241m=\u001b[39mencoding) \u001b[38;5;28;01mas\u001b[39;00m f:\n\u001b[0;32m    172\u001b[0m         compatify \u001b[38;5;241m=\u001b[39m compat\u001b[38;5;241m.\u001b[39mas_bytes \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m mode \u001b[38;5;28;01melse\u001b[39;00m compat\u001b[38;5;241m.\u001b[39mas_text\n\u001b[0;32m    173\u001b[0m         f\u001b[38;5;241m.\u001b[39mwrite(compatify(file_content))\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: b'F:\\\\Dino\\\\UCB-USACE-LSTMs\\\\neuralhydrology\\\\UCB_training\\\\runs\\\\testing_run_3010_125502\\\\testing_run_3010_132443\\\\testing_run_3010_135306\\\\testing_run_3010_142246\\\\testing_run_3010_145229\\\\testing_run_3010_152212\\\\testing_run_3010_155204\\\\events.out.tfevents.1730328724.GEOG-565-3W.24536.7'"
     ]
    }
   ],
   "source": [
    "trainer.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainer.results()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "trainer.test"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
